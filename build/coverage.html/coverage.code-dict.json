{"/home/travis/build/npmtest/node-npmtest-node-firebird/test.js":"/* istanbul instrument in package npmtest_node_firebird */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-firebird/lib.npmtest_node_firebird.js":"/* istanbul instrument in package npmtest_node_firebird */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_firebird = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_firebird = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-firebird/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-firebird && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_firebird */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_firebird\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_firebird.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_firebird.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_firebird.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_firebird.__dirname + '/lib.npmtest_node_firebird.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-firebird/node_modules/node-firebird/lib/index.js":"var\n    net = require('net'),\n    os = require('os'),\n    Events = require('events'),\n    stream = require('stream'),\n    serialize = require('./serialize.js'),\n    XdrReader = serialize.XdrReader,\n    BlrReader = serialize.BlrReader,\n    XdrWriter = serialize.XdrWriter,\n    BlrWriter = serialize.BlrWriter,\n    messages = require('./messages.js')\n\nif (typeof(setImmediate) === 'undefined') {\n    global.setImmediate = function(cb) {\n        process.nextTick(cb);\n    };\n}\n\n/**\n * Parse date from string\n * @return {Date}\n */\nif (String.prototype.parseDate === undefined) {\n    String.prototype.parseDate = function() {\n        var self = this.trim();\n        var arr = self.indexOf(' ') === -1 ? self.split('T') : self.split(' ');\n        var index = arr[0].indexOf(':');\n        var length = arr[0].length;\n\n        if (index !== -1) {\n            var tmp = arr[1];\n            arr[1] = arr[0];\n            arr[0] = tmp;\n        }\n\n        if (arr[0] === undefined)\n            arr[0] = '';\n\n        var noTime = arr[1] === undefined ? true : arr[1].length === 0;\n\n        for (var i = 0; i < length; i++) {\n            var c = arr[0].charCodeAt(i);\n            if (c > 47 && c < 58)\n                continue;\n            if (c === 45 || c === 46)\n                continue;\n\n            if (noTime)\n                return new Date(self);\n        }\n\n        if (arr[1] === undefined)\n            arr[1] = '00:00:00';\n\n        var firstDay = arr[0].indexOf('-') === -1;\n\n        var date = (arr[0] || '').split(firstDay ? '.' : '-');\n        var time = (arr[1] || '').split(':');\n        var parsed = [];\n\n        if (date.length < 4 && time.length < 2)\n            return new Date(self);\n\n        index = (time[2] || '').indexOf('.');\n\n        // milliseconds\n        if (index !== -1) {\n            time[3] = time[2].substring(index + 1);\n            time[2] = time[2].substring(0, index);\n        } else\n            time[3] = '0';\n\n        parsed.push(parseInt(date[firstDay ? 2 : 0], 10)); // year\n        parsed.push(parseInt(date[1], 10)); // month\n        parsed.push(parseInt(date[firstDay ? 0 : 2], 10)); // day\n        parsed.push(parseInt(time[0], 10)); // hours\n        parsed.push(parseInt(time[1], 10)); // minutes\n        parsed.push(parseInt(time[2], 10)); // seconds\n        parsed.push(parseInt(time[3], 10)); // miliseconds\n\n        var def = new Date();\n\n        for (var i = 0, length = parsed.length; i < length; i++) {\n            if (isNaN(parsed[i]))\n                parsed[i] = 0;\n\n            var value = parsed[i];\n            if (value !== 0)\n                continue;\n\n            switch (i) {\n                case 0:\n                    if (value <= 0)\n                        parsed[i] = def.getFullYear();\n                    break;\n                case 1:\n                    if (value <= 0)\n                        parsed[i] = def.getMonth() + 1;\n                    break;\n                case 2:\n                    if (value <= 0)\n                        parsed[i] = def.getDate();\n                    break;\n            }\n        }\n\n        return new Date(parsed[0], parsed[1] - 1, parsed[2], parsed[3], parsed[4], parsed[5]);\n    };\n}\n\nfunction noop() {}\n\nconst\n    MAX_BUFFER_SIZE = 8192;\n\nconst\n    op_void                   = 0,  // Packet has been voided\n    op_connect                = 1,  // Connect to remote server\n    op_exit                   = 2,  // Remote end has exitted\n    op_accept                 = 3,  // Server accepts connection\n    op_reject                 = 4,  // Server rejects connection\n    op_disconnect             = 6,  // Connect is going away\n    op_response               = 9,  // Generic response block\n\n    // Full context server operations\n\n    op_attach                 = 19, // Attach database\n    op_create                 = 20, // Create database\n    op_detach                 = 21, // Detach database\n    op_compile                = 22, // Request based operations\n    op_start                  = 23,\n    op_start_and_send         = 24,\n    op_send                   = 25,\n    op_receive                = 26,\n    op_unwind                 = 27, // apparently unused, see protocol.cpp's case op_unwind\n    op_release                = 28,\n\n    op_transaction            = 29, // Transaction operations\n    op_commit                 = 30,\n    op_rollback               = 31,\n    op_prepare                = 32,\n    op_reconnect              = 33,\n\n    op_create_blob            = 34, // Blob operations\n    op_open_blob              = 35,\n    op_get_segment            = 36,\n    op_put_segment            = 37,\n    op_cancel_blob            = 38,\n    op_close_blob             = 39,\n\n    op_info_database          = 40, // Information services\n    op_info_request           = 41,\n    op_info_transaction       = 42,\n    op_info_blob              = 43,\n\n    op_batch_segments         = 44, // Put a bunch of blob segments\n\n    op_que_events             = 48, // Que event notification request\n    op_cancel_events          = 49, // Cancel event notification request\n    op_commit_retaining       = 50, // Commit retaining (what else)\n    op_prepare2               = 51, // Message form of prepare\n    op_event                  = 52, // Completed event request (asynchronous)\n    op_connect_request        = 53, // Request to establish connection\n    op_aux_connect            = 54, // Establish auxiliary connection\n    op_ddl                    = 55, // DDL call\n    op_open_blob2             = 56,\n    op_create_blob2           = 57,\n    op_get_slice              = 58,\n    op_put_slice              = 59,\n    op_slice                  = 60, // Successful response to op_get_slice\n    op_seek_blob              = 61, // Blob seek operation\n\n// DSQL operations\n\n    op_allocate_statement     = 62, // allocate a statment handle\n    op_execute                = 63, // execute a prepared statement\n    op_exec_immediate         = 64, // execute a statement\n    op_fetch                  = 65, // fetch a record\n    op_fetch_response         = 66, // response for record fetch\n    op_free_statement         = 67, // free a statement\n    op_prepare_statement      = 68, // prepare a statement\n    op_set_cursor             = 69, // set a cursor name\n    op_info_sql               = 70,\n\n    op_dummy                  = 71, // dummy packet to detect loss of client\n    op_response_piggyback     = 72, // response block for piggybacked messages\n    op_start_and_receive      = 73,\n    op_start_send_and_receive = 74,\n    op_exec_immediate2        = 75, // execute an immediate statement with msgs\n    op_execute2               = 76, // execute a statement with msgs\n    op_insert                 = 77,\n    op_sql_response           = 78, // response from execute, exec immed, insert\n    op_transact               = 79,\n    op_transact_response      = 80,\n    op_drop_database          = 81,\n    op_service_attach         = 82,\n    op_service_detach         = 83,\n    op_service_info           = 84,\n    op_service_start          = 85,\n    op_rollback_retaining     = 86,\n    op_partial                = 89, // packet is not complete - delay processing\n    op_trusted_auth           = 90,\n    op_cancel                 = 91,\n    op_cont_auth              = 92,\n    op_ping                   = 93,\n    op_accept_data            = 94, // Server accepts connection and returns some data to client\n    op_abort_aux_connection   = 95, // Async operation - stop waiting for async connection to arrive\n    op_crypt                  = 96,\n    op_crypt_key_callback     = 97,\n    op_cond_accept            = 98; // Server accepts connection, returns some data to client\n                                    // and asks client to continue authentication before attach call\n\nconst\n    CONNECT_VERSION2          = 2,\n    ARCHITECTURE_GENERIC      = 1;\n\nconst\n// Protocol 10 includes support for warnings and removes the requirement for\n// encoding and decoding status codes\n    PROTOCOL_VERSION10  = 10,\n\n// Since protocol 11 we must be separated from Borland Interbase.\n// Therefore always set highmost bit in protocol version to 1.\n// For unsigned protocol version this does not break version's compare.\n\n    FB_PROTOCOL_FLAG    = 0x8000,\n\n// Protocol 11 has support for user authentication related\n// operations (op_update_account_info, op_authenticate_user and\n// op_trusted_auth). When specific operation is not supported,\n// we say \"sorry\".\n\n    PROTOCOL_VERSION11  = (FB_PROTOCOL_FLAG | 11),\n\n// Protocol 12 has support for asynchronous call op_cancel.\n// Currently implemented asynchronously only for TCP/IP.\n\n    PROTOCOL_VERSION12  = (FB_PROTOCOL_FLAG | 12),\n\n// Protocol 13 has support for authentication plugins (op_cont_auth).\n\n    PROTOCOL_VERSION13  = (FB_PROTOCOL_FLAG | 13);\n\n\nconst\n    DSQL_close      = 1,\n    DSQL_drop       = 2,\n    DSQL_unprepare  = 4; // >= 2.5\n\nconst\n    ptype_batch_send = 3;\n\nconst\n    SQL_TEXT      = 452, // Array of char\n    SQL_VARYING   = 448,\n    SQL_SHORT     = 500,\n    SQL_LONG      = 496,\n    SQL_FLOAT     = 482,\n    SQL_DOUBLE    = 480,\n    SQL_D_FLOAT   = 530,\n    SQL_TIMESTAMP = 510,\n    SQL_BLOB      = 520,\n    SQL_ARRAY     = 540,\n    SQL_QUAD      = 550,\n    SQL_TYPE_TIME = 560,\n    SQL_TYPE_DATE = 570,\n    SQL_INT64     = 580,\n    SQL_BOOLEAN   = 32764, // >= 3.0\n    SQL_NULL      = 32766; // >= 2.5\n\n/***********************/\n/*   ISC Services      */\n/***********************/\nconst\n\tisc_action_svc_backup = 1, /* Starts database backup process on the server\t*/\n\tisc_action_svc_restore = 2, /* Starts database restore process on the server */\n\tisc_action_svc_repair = 3, /* Starts database repair process on the server\t*/\n\tisc_action_svc_add_user = 4, /* Adds\ta new user to the security database\t*/\n\tisc_action_svc_delete_user = 5, /* Deletes a user record from the security database\t*/\n\tisc_action_svc_modify_user = 6, /* Modifies\ta user record in the security database */\n\tisc_action_svc_display_user = 7, /* Displays\ta user record from the security\tdatabase */\n\tisc_action_svc_properties = 8, /* Sets\tdatabase properties\t*/\n\tisc_action_svc_add_license = 9, /* Adds\ta license to the license file */\n\tisc_action_svc_remove_license = 10, /* Removes a license from the license file */\n\tisc_action_svc_db_stats = 11, /* Retrieves database statistics */\n\tisc_action_svc_get_ib_log = 12, /* Retrieves the InterBase log file\tfrom the server\t*/\n    isc_action_svc_get_fb_log = isc_action_svc_get_ib_log, /* Retrieves the Firebird log file\tfrom the server\t*/\n    isc_action_svc_nbak = 20, /* start nbackup */\n    isc_action_svc_nrest = 21,  /* start nrestore */\n    isc_action_svc_trace_start = 22,\n    isc_action_svc_trace_stop = 23,\n    isc_action_svc_trace_suspend = 24,\n    isc_action_svc_trace_resume = 25,\n    isc_action_svc_trace_list = 26;\n\nconst\n\tisc_info_svc_svr_db_info = 50, /* Retrieves the number\tof attachments and databases */\n\tisc_info_svc_get_license = 51, /* Retrieves all license keys and IDs from the license file\t*/\n\tisc_info_svc_get_license_mask = 52, /* Retrieves a bitmask representing\tlicensed options on\tthe\tserver */\n\tisc_info_svc_get_config = 53, /* Retrieves the parameters\tand\tvalues for IB_CONFIG */\n\tisc_info_svc_version = 54, /* Retrieves the version of\tthe\tservices manager */\n\tisc_info_svc_server_version = 55, /* Retrieves the version of\tthe\tInterBase server */\n\tisc_info_svc_implementation = 56, /* Retrieves the implementation\tof the InterBase server\t*/\n\tisc_info_svc_capabilities = 57, /* Retrieves a bitmask representing\tthe\tserver's capabilities */\n\tisc_info_svc_user_dbpath = 58, /* Retrieves the path to the security database in use by the server\t*/\n\tisc_info_svc_get_env = 59, /* Retrieves the setting of\t$INTERBASE */\n\tisc_info_svc_get_env_lock = 60, /* Retrieves the setting of\t$INTERBASE_LCK */\n\tisc_info_svc_get_env_msg = 61, /* Retrieves the setting of\t$INTERBASE_MSG */\n\tisc_info_svc_line = 62, /* Retrieves 1 line\tof service output per call */\n\tisc_info_svc_to_eof = 63, /* Retrieves as much of\tthe\tserver output as will fit in the supplied buffer */\n\tisc_info_svc_timeout = 64, /* Sets\t/ signifies\ta timeout value\tfor\treading\tservice\tinformation\t*/\n\tisc_info_svc_get_licensed_users = 65, /* Retrieves the number\tof users licensed for accessing\tthe\tserver */\n\tisc_info_svc_limbo_trans = 66, /* Retrieve\tthe\tlimbo transactions */\n\tisc_info_svc_running = 67, /* Checks to see if\ta service is running on\tan attachment */\n\tisc_info_svc_get_users = 68, /* Returns the user\tinformation\tfrom isc_action_svc_display_users */\n    isc_info_svc_stdin = 78;\n\n/* Services Properties */\nconst\n\tisc_spb_prp_page_buffers = 5,\n\tisc_spb_prp_sweep_interval = 6,\n\tisc_spb_prp_shutdown_db = 7,\n\tisc_spb_prp_deny_new_attachments = 9,\n\tisc_spb_prp_deny_new_transactions = 10,\n\tisc_spb_prp_reserve_space = 11,\n\tisc_spb_prp_write_mode = 12,\n\tisc_spb_prp_access_mode = 13,\n\tisc_spb_prp_set_sql_dialect = 14,\n    isc_spb_num_att = 5,\n    isc_spb_num_db = 6,\n    // SHUTDOWN OPTION FOR 2.0\n    isc_spb_prp_force_shutdown = 41,\n    isc_spb_prp_attachments_shutdown = 42,\n    isc_spb_prp_transactions_shutdown = 43,\n    isc_spb_prp_shutdown_mode = 44,\n    isc_spb_prp_online_mode = 45,\n\n    isc_spb_prp_sm_normal = 0,\n    isc_spb_prp_sm_multi = 1,\n    isc_spb_prp_sm_single = 2,\n    isc_spb_prp_sm_full = 3,\n\n\n\t\t// WRITE_MODE_PARAMETERS\n\tisc_spb_prp_wm_async = 37,\n\tisc_spb_prp_wm_sync = 38,\n\n\t\t// ACCESS_MODE_PARAMETERS\n\tisc_spb_prp_am_readonly = 39,\n\tisc_spb_prp_am_readwrite = 40,\n\n\t\t// RESERVE_SPACE_PARAMETERS\n\tisc_spb_prp_res_use_full = 35,\n\tisc_spb_prp_res = 36,\n\n\t\t// Option Flags\n\tisc_spb_prp_activate = 0x0100,\n\tisc_spb_prp_db_online = 0x0200;\n\n    // SHUTDOWN MODE\n\n/* · Backup Service ·*/\nconst\n\tisc_spb_bkp_file = 5,\n\tisc_spb_bkp_factor = 6,\n\tisc_spb_bkp_length = 7,\n    isc_spb_bkp_ignore_checksums = 0x01,\n    isc_spb_bkp_ignore_limbo = 0x02,\n    isc_spb_bkp_metadata_only = 0x04,\n    isc_spb_bkp_no_garbage_collect = 0x08,\n    isc_spb_bkp_old_descriptions = 0x10,\n    isc_spb_bkp_non_transportable = 0x20,\n    isc_spb_bkp_convert = 0x40,\n    isc_spb_bkp_expand = 0x80,\n    isc_spb_bkp_no_triggers = 0x8000,\n    // nbackup\n    isc_spb_nbk_level = 5,\n    isc_spb_nbk_file = 6,\n    isc_spb_nbk_direct = 7,\n    isc_spb_nbk_no_triggers = 0x01;\n\n/*\tRestore Service ·*/\nconst\n\tisc_spb_res_buffers = 9,\n\tisc_spb_res_page_size = 10,\n\tisc_spb_res_length = 11,\n\tisc_spb_res_access_mode = 12,\n    isc_spb_res_fix_fss_data = 13,\n    isc_spb_res_fix_fss_metadata = 14,\n\tisc_spb_res_am_readonly = isc_spb_prp_am_readonly,\n\tisc_spb_res_am_readwrite = isc_spb_prp_am_readwrite,\n    isc_spb_res_deactivate_idx = 0x0100,\n    isc_spb_res_no_shadow = 0x0200,\n    isc_spb_res_no_validity = 0x0400,\n    isc_spb_res_one_at_a_time = 0x0800,\n    isc_spb_res_replace = 0x1000,\n    isc_spb_res_create = 0x2000,\n    isc_spb_res_use_all_space = 0x4000;\n\n\n/* · Repair Service ·*/\nconst\n    isc_spb_rpr_commit_trans = 15,\n\tisc_spb_rpr_rollback_trans = 34,\n\tisc_spb_rpr_recover_two_phase = 17,\n\tisc_spb_tra_id = 18,\n\tisc_spb_single_tra_id = 19,\n\tisc_spb_multi_tra_id = 20,\n\tisc_spb_tra_state = 21,\n\tisc_spb_tra_state_limbo = 22,\n\tisc_spb_tra_state_commit = 23,\n\tisc_spb_tra_state_rollback = 24,\n\tisc_spb_tra_state_unknown = 25,\n\tisc_spb_tra_host_site = 26,\n\tisc_spb_tra_remote_site = 27,\n\tisc_spb_tra_db_path = 28,\n\tisc_spb_tra_advise = 29,\n\tisc_spb_tra_advise_commit = 30,\n\tisc_spb_tra_advise_rollback = 31,\n\tisc_spb_tra_advise_unknown = 33,\n    isc_spb_rpr_validate_db = 0x01,\n    isc_spb_rpr_sweep_db = 0x02,\n    isc_spb_rpr_mend_db = 0x04,\n    isc_spb_rpr_list_limbo_trans = 0x08,\n    isc_spb_rpr_check_db = 0x10,\n    isc_spb_rpr_ignore_checksum = 0x20,\n    isc_spb_rpr_kill_shadows = 0x40,\n    isc_spb_rpr_full = 0x80,\n    isc_spb_rpr_icu = 0x0800;\n\n/* · Security Service ·*/\nconst\n\tisc_spb_sec_userid = 5,\n\tisc_spb_sec_groupid = 6,\n\tisc_spb_sec_username = 7,\n\tisc_spb_sec_password = 8,\n\tisc_spb_sec_groupname = 9,\n\tisc_spb_sec_firstname = 10,\n\tisc_spb_sec_middlename = 11,\n\tisc_spb_sec_lastname = 12,\n    isc_spb_sec_admin = 13;\n\n/* License Service */\nconst\n    isc_spb_lic_key = 5,\n    isc_spb_lic_id = 6,\n    isc_spb_lic_desc = 7;\n\n/* Statistics Service */\nconst\n    isc_spb_sts_data_pages = 0x01,\n    isc_spb_sts_db_log = 0x02,\n    isc_spb_sts_hdr_pages = 0x04,\n    isc_spb_sts_idx_pages = 0x08,\n    isc_spb_sts_sys_relations = 0x10,\n    isc_spb_sts_record_versions = 0x20,\n    isc_spb_sts_table = 0x40,\n    isc_spb_sts_nocreation = 0x80;\n\n/* Trace Service */\nconst\n    isc_spb_trc_id = 1,\n    isc_spb_trc_name = 2,\n    isc_spb_trc_cfg = 3;\n\n\n/***********************/\n/*   ISC Error Codes   */\n/***********************/\nconst\n    isc_arg_end                     = 0,  // end of argument list\n    isc_arg_gds                     = 1,  // generic DSRI status value\n    isc_arg_string                  = 2,  // string argument\n    isc_arg_cstring                 = 3,  // count & string argument\n    isc_arg_number                  = 4,  // numeric argument (long)\n    isc_arg_interpreted             = 5,  // interpreted status code (string)\n    isc_arg_unix                    = 7,  // UNIX error code\n    isc_arg_next_mach               = 15, // NeXT/Mach error code\n    isc_arg_win32                   = 17, // Win32 error code\n    isc_arg_warning                 = 18, // warning argument\n    isc_arg_sql_state               = 19; // SQLSTATE\n\nconst\n    isc_sqlerr = 335544436;\n\n/**********************************/\n/* Database parameter block stuff */\n/**********************************/\nconst\n    isc_dpb_version1                = 1,\n    isc_dpb_version2                = 2, // >= FB30\n    isc_dpb_cdd_pathname            = 1,\n    isc_dpb_allocation              = 2,\n    isc_dpb_journal                 = 3,\n    isc_dpb_page_size               = 4,\n    isc_dpb_num_buffers             = 5,\n    isc_dpb_buffer_length           = 6,\n    isc_dpb_debug                   = 7,\n    isc_dpb_garbage_collect         = 8,\n    isc_dpb_verify                  = 9,\n    isc_dpb_sweep                   = 10,\n    isc_dpb_enable_journal          = 11,\n    isc_dpb_disable_journal         = 12,\n    isc_dpb_dbkey_scope             = 13,\n    isc_dpb_number_of_users         = 14,\n    isc_dpb_trace                   = 15,\n    isc_dpb_no_garbage_collect      = 16,\n    isc_dpb_damaged                 = 17,\n    isc_dpb_license                 = 18,\n    isc_dpb_sys_user_name           = 19,\n    isc_dpb_encrypt_key             = 20,\n    isc_dpb_activate_shadow         = 21,\n    isc_dpb_sweep_interval          = 22,\n    isc_dpb_delete_shadow           = 23,\n    isc_dpb_force_write             = 24,\n    isc_dpb_begin_log               = 25,\n    isc_dpb_quit_log                = 26,\n    isc_dpb_no_reserve              = 27,\n    isc_dpb_user_name               = 28,\n    isc_dpb_password                = 29,\n    isc_dpb_password_enc            = 30,\n    isc_dpb_sys_user_name_enc       = 31,\n    isc_dpb_interp                  = 32,\n    isc_dpb_online_dump             = 33,\n    isc_dpb_old_file_size           = 34,\n    isc_dpb_old_num_files           = 35,\n    isc_dpb_old_file                = 36,\n    isc_dpb_old_start_page          = 37,\n    isc_dpb_old_start_seqno         = 38,\n    isc_dpb_old_start_file          = 39,\n    isc_dpb_old_dump_id             = 41,\n    isc_dpb_lc_messages             = 47,\n    isc_dpb_lc_ctype                = 48,\n    isc_dpb_cache_manager           = 49,\n    isc_dpb_shutdown                = 50,\n    isc_dpb_online                  = 51,\n    isc_dpb_shutdown_delay          = 52,\n    isc_dpb_reserved                = 53,\n    isc_dpb_overwrite               = 54,\n    isc_dpb_sec_attach              = 55,\n    isc_dpb_connect_timeout         = 57,\n    isc_dpb_dummy_packet_interval   = 58,\n    isc_dpb_gbak_attach             = 59,\n    isc_dpb_sql_role_name           = 60,\n    isc_dpb_set_page_buffers        = 61,\n    isc_dpb_working_directory       = 62,\n    isc_dpb_sql_dialect             = 63,\n    isc_dpb_set_db_readonly         = 64,\n    isc_dpb_set_db_sql_dialect      = 65,\n    isc_dpb_gfix_attach             = 66,\n    isc_dpb_gstat_attach            = 67,\n    isc_dpb_set_db_charset          = 68,\n    isc_dpb_gsec_attach             = 69,\n    isc_dpb_address_path            = 70,\n    isc_dpb_process_id              = 71,\n    isc_dpb_no_db_triggers          = 72,\n    isc_dpb_trusted_auth            = 73,\n    isc_dpb_process_name            = 74,\n    isc_dpb_trusted_role            = 75,\n    isc_dpb_org_filename            = 76,\n    isc_dpb_utf8_filename           = 77,\n    isc_dpb_ext_call_depth          = 78;\n\n/*************************************/\n/* Services parameter block stuff    */\n/*************************************/\nconst\n    isc_spb_version1 = 1,\n    isc_spb_current_version = 2,\n    isc_spb_version = isc_spb_current_version,\n    isc_spb_user_name = isc_dpb_user_name,\n    isc_spb_sys_user_name = isc_dpb_sys_user_name,\n    isc_spb_sys_user_name_enc = isc_dpb_sys_user_name_enc,\n    isc_spb_password = isc_dpb_password,\n    isc_spb_password_enc = isc_dpb_password_enc,\n    isc_spb_command_line = 105,\n    isc_spb_dbname = 106,\n    isc_spb_verbose = 107,\n    isc_spb_options = 108;\n\n/*************************************/\n/* Transaction parameter block stuff */\n/*************************************/\nconst\n    isc_tpb_version1                =  1,\n    isc_tpb_version3                =  3,\n    isc_tpb_consistency             =  1,\n    isc_tpb_concurrency             =  2,\n    isc_tpb_shared                  =  3, // < FB21\n    isc_tpb_protected               =  4, // < FB21\n    isc_tpb_exclusive               =  5, // < FB21\n    isc_tpb_wait                    =  6,\n    isc_tpb_nowait                  =  7,\n    isc_tpb_read                    =  8,\n    isc_tpb_write                   =  9,\n    isc_tpb_lock_read               =  10,\n    isc_tpb_lock_write              =  11,\n    isc_tpb_verb_time               =  12,\n    isc_tpb_commit_time             =  13,\n    isc_tpb_ignore_limbo            =  14,\n    isc_tpb_read_committed          =  15,\n    isc_tpb_autocommit              =  16,\n    isc_tpb_rec_version             =  17,\n    isc_tpb_no_rec_version          =  18,\n    isc_tpb_restart_requests        =  19,\n    isc_tpb_no_auto_undo            =  20,\n    isc_tpb_lock_timeout            =  21; // >= FB20\n\n/****************************/\n/* Common, structural codes */\n/****************************/\nconst\n    isc_info_end                    = 1,\n    isc_info_truncated              = 2,\n    isc_info_error                  = 3,\n    isc_info_data_not_ready         = 4,\n    isc_info_length                 = 126,\n    isc_info_flag_end               = 127;\n\n/*************************/\n/* SQL information items */\n/*************************/\nconst\n    isc_info_sql_select             = 4,\n    isc_info_sql_bind               = 5,\n    isc_info_sql_num_variables      = 6,\n    isc_info_sql_describe_vars      = 7,\n    isc_info_sql_describe_end       = 8,\n    isc_info_sql_sqlda_seq          = 9,\n    isc_info_sql_message_seq        = 10,\n    isc_info_sql_type               = 11,\n    isc_info_sql_sub_type           = 12,\n    isc_info_sql_scale              = 13,\n    isc_info_sql_length             = 14,\n    isc_info_sql_null_ind           = 15,\n    isc_info_sql_field              = 16,\n    isc_info_sql_relation           = 17,\n    isc_info_sql_owner              = 18,\n    isc_info_sql_alias              = 19,\n    isc_info_sql_sqlda_start        = 20,\n    isc_info_sql_stmt_type          = 21,\n    isc_info_sql_get_plan           = 22,\n    isc_info_sql_records            = 23,\n    isc_info_sql_batch_fetch        = 24,\n    isc_info_sql_relation_alias     = 25, // >= 2.0\n    isc_info_sql_explain_plan       = 26; // >= 3.0\n\n/*******************/\n/* Blr definitions */\n/*******************/\nconst\n    blr_text            = 14,\n    blr_text2           = 15,\n    blr_short           = 7,\n    blr_long            = 8,\n    blr_quad            = 9,\n    blr_float           = 10,\n    blr_double          = 27,\n    blr_d_float         = 11,\n    blr_timestamp       = 35,\n    blr_varying         = 37,\n    blr_varying2        = 38,\n    blr_blob            = 261,\n    blr_cstring         = 40,\n    blr_cstring2        = 41,\n    blr_blob_id         = 45,\n    blr_sql_date        = 12,\n    blr_sql_time        = 13,\n    blr_int64           = 16,\n    blr_blob2           = 17, // >= 2.0\n    blr_domain_name     = 18, // >= 2.1\n    blr_domain_name2    = 19, // >= 2.1\n    blr_not_nullable    = 20, // >= 2.1\n    blr_column_name     = 21, // >= 2.5\n    blr_column_name2    = 22, // >= 2.5\n    blr_bool            = 23, // >= 3.0\n\n    blr_version4        = 4,\n    blr_version5        = 5, // dialect 3\n    blr_eoc             = 76,\n    blr_end             = 255,\n\n    blr_assignment      = 1,\n    blr_begin           = 2,\n    blr_dcl_variable    = 3,\n    blr_message         = 4;\n\nconst\n    isc_info_sql_stmt_select          = 1,\n    isc_info_sql_stmt_insert          = 2,\n    isc_info_sql_stmt_update          = 3,\n    isc_info_sql_stmt_delete          = 4,\n    isc_info_sql_stmt_ddl             = 5,\n    isc_info_sql_stmt_get_segment     = 6,\n    isc_info_sql_stmt_put_segment     = 7,\n    isc_info_sql_stmt_exec_procedure  = 8,\n    isc_info_sql_stmt_start_trans     = 9,\n    isc_info_sql_stmt_commit          = 10,\n    isc_info_sql_stmt_rollback        = 11,\n    isc_info_sql_stmt_select_for_upd  = 12,\n    isc_info_sql_stmt_set_generator   = 13,\n    isc_info_sql_stmt_savepoint       = 14;\n\nconst\n    isc_blob_text = 1;\n\nconst\n    DESCRIBE =\n        [isc_info_sql_stmt_type,\n        isc_info_sql_select,\n            isc_info_sql_describe_vars,\n            isc_info_sql_sqlda_seq,\n            isc_info_sql_type,\n            isc_info_sql_sub_type,\n            isc_info_sql_scale,\n            isc_info_sql_length,\n            isc_info_sql_field,\n            isc_info_sql_relation,\n            //isc_info_sql_owner,\n            isc_info_sql_alias,\n            isc_info_sql_describe_end,\n            isc_info_sql_bind,\n            isc_info_sql_describe_vars,\n            isc_info_sql_sqlda_seq,\n            isc_info_sql_type,\n            isc_info_sql_sub_type,\n            isc_info_sql_scale,\n            isc_info_sql_length,\n            isc_info_sql_describe_end];\n\nconst\n    ISOLATION_READ_UNCOMMITTED          = [isc_tpb_version3, isc_tpb_write, isc_tpb_wait, isc_tpb_read_committed, isc_tpb_rec_version],\n    ISOLATION_READ_COMMITED             = [isc_tpb_version3, isc_tpb_write, isc_tpb_wait, isc_tpb_read_committed, isc_tpb_no_rec_version],\n    ISOLATION_REPEATABLE_READ           = [isc_tpb_version3, isc_tpb_write, isc_tpb_wait, isc_tpb_concurrency],\n    ISOLATION_SERIALIZABLE              = [isc_tpb_version3, isc_tpb_write, isc_tpb_wait, isc_tpb_consistency],\n    ISOLATION_READ_COMMITED_READ_ONLY   = [isc_tpb_version3, isc_tpb_read, isc_tpb_wait, isc_tpb_read_committed, isc_tpb_no_rec_version];\n\nconst\n    DEFAULT_HOST = '127.0.0.1',\n    DEFAULT_PORT = 3050,\n    DEFAULT_USER = 'SYSDBA',\n    DEFAULT_PASSWORD = 'masterkey',\n    DEFAULT_LOWERCASE_KEYS = false,\n    DEFAULT_PAGE_SIZE = 4096,\n    DEFAULT_SVC_NAME = 'service_mgr';\n\nexports.ISOLATION_READ_UNCOMMITTED = ISOLATION_READ_UNCOMMITTED;\nexports.ISOLATION_READ_COMMITED = ISOLATION_READ_COMMITED;\nexports.ISOLATION_REPEATABLE_READ = ISOLATION_REPEATABLE_READ;\nexports.ISOLATION_SERIALIZABLE = ISOLATION_SERIALIZABLE;\nexports.ISOLATION_READ_COMMITED_READ_ONLY = ISOLATION_READ_COMMITED_READ_ONLY;\n\nif (!String.prototype.padLeft) {\n    String.prototype.padLeft = function(max, c) {\n        var self = this;\n        return new Array(Math.max(0, max - self.length + 1)).join(c || ' ') + self;\n    };\n}\n\n/**\n * Escape value\n * @param {Object} value\n * @return {String}\n */\nexports.escape = function(value) {\n\n    if (value === null || value === undefined)\n        return 'NULL';\n\n    switch (typeof(value)) {\n        case 'boolean':\n            return value ? '1' : '0';\n        case 'number':\n            return value.toString();\n        case 'string':\n            return \"'\" + value.replace(/'/g, \"''\").replace(/\\\\/g, '\\\\\\\\') + \"'\";\n    }\n\n    if (value instanceof Date)\n        return \"'\" + value.getFullYear() + '-' + value.getMonth().toString().padLeft(2, '0') + '-' + value.getDate().toString().padLeft(2, '0') + ' ' + value.getHours().toString().padLeft(2, '0') + ':' + value.getMinutes().toString().padLeft(2, '0') + ':' + value.getSeconds().toString().padLeft(2, '0') + \"'\";\n\n    throw new Error('Escape supports only primitive values.');\n};\n\nconst\n    DEFAULT_ENCODING = 'utf8',\n    DEFAULT_FETCHSIZE = 200;\n\nconst\n    MAX_INT = Math.pow(2, 31) - 1,\n    MIN_INT = - Math.pow(2, 31);\n\n/***************************************\n *\n *   SQLVar\n *\n ***************************************/\n\n\nconst\n    ScaleDivisor = [1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000,10000000000, 100000000000,1000000000000,10000000000000,100000000000000,1000000000000000];\nconst\n    DateOffset = 40587,\n    TimeCoeff = 86400000,\n    MsPerMinute = 60000;\n\n//------------------------------------------------------\n\nfunction SQLVarText() {}\n\nSQLVarText.prototype.decode = function(data) {\n    var ret;\n    if (this.subType > 1) {\n        ret = data.readText(this.length, DEFAULT_ENCODING);\n    } else {\n        ret = data.readBuffer(this.length);\n    }\n\n    if (!data.readInt()) {\n        return ret;\n    }\n    return null;\n};\n\nSQLVarText.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_text);\n    blr.addWord(this.length);\n};\n\n//------------------------------------------------------\n\nfunction SQLVarNull() {}\nSQLVarNull.prototype = new SQLVarText();\nSQLVarNull.prototype.constructor = SQLVarNull;\n\n//------------------------------------------------------\n\nfunction SQLVarString() {}\n\nSQLVarString.prototype.decode = function(data) {\n    var ret;\n    if (this.subType > 1) {\n        ret = data.readString(DEFAULT_ENCODING)\n    } else {\n        ret = data.readBuffer()\n    }\n    if (!data.readInt()) {\n        return ret;\n    }\n    return null;\n};\n\nSQLVarString.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_varying);\n    blr.addWord(this.length);\n};\n\n//------------------------------------------------------\n\nfunction SQLVarQuad() {}\n\nSQLVarQuad.prototype.decode = function(data) {\n    var ret = data.readQuad();\n    if (!data.readInt()) {\n        return ret;\n    }\n    return null;\n};\n\nSQLVarQuad.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_quad);\n    blr.addShort(this.scale);\n};\n\n//------------------------------------------------------\n\nfunction SQLVarBlob() {}\nSQLVarBlob.prototype = new SQLVarQuad();\nSQLVarBlob.prototype.constructor = SQLVarBlob;\n\nSQLVarBlob.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_quad);\n    blr.addShort(0);\n};\n\n//------------------------------------------------------\n\nfunction SQLVarArray() {}\nSQLVarArray.prototype = new SQLVarQuad();\nSQLVarArray.prototype.constructor = SQLVarArray;\n\nSQLVarArray.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_quad);\n    blr.addShort(0);\n};\n\n//------------------------------------------------------\n\nfunction SQLVarInt() {}\n\nSQLVarInt.prototype.decode = function(data) {\n    var ret = data.readInt();\n    if (!data.readInt()) {\n        if (this.scale) {\n            ret = ret / ScaleDivisor[Math.abs(this.scale)];\n        }\n        return ret;\n    }\n    return null;\n};\n\nSQLVarInt.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_long);\n    blr.addShort(this.scale);\n};\n\n//------------------------------------------------------\n\nfunction SQLVarShort() {}\nSQLVarShort.prototype = new SQLVarInt();\nSQLVarShort.prototype.constructor = SQLVarShort;\n\nSQLVarShort.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_short);\n    blr.addShort(this.scale);\n};\n\n//------------------------------------------------------\n\nfunction SQLVarInt64() {}\n\nSQLVarInt64.prototype.decode = function(data) {\n    var ret = data.readInt64();\n    if (!data.readInt()) {\n        if (this.scale) {\n            ret = ret / ScaleDivisor[Math.abs(this.scale)];\n        }\n        return ret;\n    }\n    return null;\n};\n\nSQLVarInt64.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_int64);\n    blr.addShort(this.scale);\n};\n\n//------------------------------------------------------\n\nfunction SQLVarFloat() {}\n\nSQLVarFloat.prototype.decode = function(data) {\n    var ret = data.readFloat();\n    if (!data.readInt()) {\n        return ret;\n    }\n    return null;\n};\n\nSQLVarFloat.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_float);\n};\n\n//------------------------------------------------------\n\nfunction SQLVarDouble() {}\n\nSQLVarDouble.prototype.decode = function(data) {\n    var ret = data.readDouble();\n    if (!data.readInt()) {\n        return ret;\n    }\n    return null;\n};\n\nSQLVarDouble.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_double);\n};\n\n//------------------------------------------------------\n\nfunction SQLVarDate() {}\n\nSQLVarDate.prototype.decode = function(data) {\n    var ret = data.readInt();\n    if (!data.readInt()) {\n        var d = new Date(0);\n        d.setMilliseconds((ret - DateOffset) * TimeCoeff + d.getTimezoneOffset() * MsPerMinute);\n        return d;\n    }\n    return null;\n};\n\nSQLVarDate.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_sql_date);\n};\n\n//------------------------------------------------------\n\nfunction SQLVarTime() {}\n\nSQLVarTime.prototype.decode = function(data) {\n    var ret = data.readUInt();\n    if (!data.readInt()) {\n        var d = new Date(0);\n        d.setMilliseconds(Math.floor(ret / 10) + d.getTimezoneOffset() * MsPerMinute);\n        return d;\n    }\n    return null;\n};\n\nSQLVarTime.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_sql_time);\n};\n\n//------------------------------------------------------\n\nfunction SQLVarTimeStamp() {}\n\nSQLVarTimeStamp.prototype.decode = function(data) {\n    var date = data.readInt();\n    var time = data.readUInt();\n    if (!data.readInt()) {\n        var d = new Date(0);\n        d.setMilliseconds((date - DateOffset) * TimeCoeff + Math.floor(time / 10) + d.getTimezoneOffset() * MsPerMinute);\n        return d;\n    }\n    return null;\n};\n\nSQLVarTimeStamp.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_timestamp);\n};\n\n//------------------------------------------------------\n\nfunction SQLVarBoolean() {}\n\nSQLVarBoolean.prototype.decode = function(data) {\n    var ret = data.readInt();\n    if (!data.readInt()) {\n        return Boolean(ret);\n    }\n    return null;\n};\n\nSQLVarBoolean.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_bool);\n};\n\n//------------------------------------------------------\n\nfunction SQLParamInt(value){\n    this.value = value;\n}\n\nSQLParamInt.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_long);\n    blr.addShort(0);\n};\n\nSQLParamInt.prototype.encode = function(data) {\n    if (this.value != null) {\n        data.addInt(this.value);\n        data.addInt(0);\n    } else {\n        data.addInt(0);\n        data.addInt(1);\n    }\n};\n\n//------------------------------------------------------\n\nfunction SQLParamInt64(value){\n    this.value = value;\n}\n\nSQLParamInt64.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_int64);\n    blr.addShort(0);\n};\n\nSQLParamInt64.prototype.encode = function(data) {\n    if (this.value != null) {\n        data.addInt64(this.value);\n        data.addInt(0);\n    } else {\n        data.addInt64(0);\n        data.addInt(1);\n    }\n};\n\n//------------------------------------------------------\n\nfunction SQLParamDouble(value) {\n    this.value = value;\n}\n\nSQLParamDouble.prototype.encode = function(data) {\n    if (this.value != null) {\n        data.addDouble(this.value);\n        data.addInt(0);\n    } else {\n        data.addDouble(0);\n        data.addInt(1);\n    }\n};\n\nSQLParamDouble.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_double);\n};\n\n//------------------------------------------------------\n\nfunction SQLParamString(value) {\n    this.value = value;\n}\n\nSQLParamString.prototype.encode = function(data) {\n    if (this.value != null) {\n        data.addText(this.value, DEFAULT_ENCODING);\n        data.addInt(0);\n    } else {\n        data.addInt(1);\n    }\n};\n\nSQLParamString.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_text);\n    var len = this.value ? Buffer.byteLength(this.value, DEFAULT_ENCODING) : 0;\n    blr.addWord(len);\n};\n\n//------------------------------------------------------\n\nfunction SQLParamQuad(value) {\n    this.value = value;\n}\n\nSQLParamQuad.prototype.encode = function(data) {\n    if (this.value != null) {\n        data.addInt(this.value.high);\n        data.addInt(this.value.low);\n        data.addInt(0);\n    } else {\n        data.addInt(0);\n        data.addInt(0);\n        data.addInt(1);\n    }\n};\n\nSQLParamQuad.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_quad);\n    blr.addShort(0);\n};\n\n//------------------------------------------------------\n\nfunction SQLParamDate(value) {\n    this.value = value;\n}\n\nSQLParamDate.prototype.encode = function(data) {\n    if (this.value != null) {\n\n        var value = this.value.getTime() - this.value.getTimezoneOffset() * MsPerMinute;\n        var time = value % TimeCoeff;\n        var date = (value - time) / TimeCoeff + DateOffset;\n        time *= 10;\n\n        // check overflow\n        if (time < 0) {\n            date--;\n            time = TimeCoeff*10 + time;\n        }\n\n        data.addInt(date);\n        data.addUInt(time);\n        data.addInt(0);\n    } else {\n        data.addInt(0);\n        data.addUInt(0);\n        data.addInt(1);\n    }\n};\n\nSQLParamDate.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_timestamp);\n};\n\n//------------------------------------------------------\n\nfunction SQLParamBool(value) {\n    this.value = value;\n}\n\nSQLParamBool.prototype.encode = function(data) {\n    if (this.value != null) {\n        data.addInt(this.value ? 1 : 0);\n        data.addInt(0);\n    } else {\n        data.addInt(0);\n        data.addInt(1);\n    }\n};\n\nSQLParamBool.prototype.calcBlr = function(blr) {\n    blr.addByte(blr_short);\n    blr.addShort(0);\n};\n\n\n/***************************************\n *\n *   Error handling\n *\n ***************************************/\n\nfunction isError(obj) {\n    return (obj instanceof Object && obj.status);\n}\n\nfunction doCallback(obj, callback) {\n\n    if (!callback)\n        return;\n\n    if (obj instanceof Error) {\n        callback(obj);\n        return;\n    }\n\n    if (isError(obj)) {\n        callback(new Error(obj.message));\n        return;\n    }\n\n    callback(undefined, obj);\n\n}\n\nfunction doError(obj, callback) {\n    if (callback)\n        callback(obj)\n}\n\n/***************************************\n *\n *   Statement\n *\n ***************************************/\n\nfunction Statement(connection) {\n    this.connection = connection;\n}\n\nStatement.prototype.close = function(callback) {\n    this.connection.closeStatement(this, callback);\n};\n\nStatement.prototype.drop = function(callback) {\n    this.connection.dropStatement(this, callback);\n};\n\nStatement.prototype.release = function(callback) {\n    var cache_query = this.connection.getCachedQuery(this.query);\n    if (cache_query)\n        this.connection.closeStatement(this, callback);\n    else\n        this.connection.dropStatement(this, callback);\n};\n\nStatement.prototype.execute = function(transaction, params, callback, custom) {\n\n    if (params instanceof Function) {\n        custom = callback;\n        callback = params;\n        params = undefined;\n    }\n\n    this.custom = custom;\n    this.connection.executeStatement(transaction, this, params, callback, custom);\n};\n\nStatement.prototype.fetch = function(transaction, count, callback) {\n    this.connection.fetch(this, transaction, count, callback);\n};\n\nStatement.prototype.fetchAll = function(transaction, callback) {\n    this.connection.fetchAll(this, transaction, callback);\n};\n\n/***************************************\n *\n *   Transaction\n *\n ***************************************/\n\nfunction Transaction(connection) {\n    this.connection = connection;\n    this.db = connection.db;\n}\n\nTransaction.prototype.newStatement = function(query, callback) {\n    var cnx = this.connection;\n    var self = this;\n    var query_cache = cnx.getCachedQuery(query);\n    if (query_cache) {\n        callback(null, query_cache);\n    } else {\n        cnx.allocateStatement(function (err, statement) {\n            if (err) {\n                doError(err, callback);\n                return;\n            }\n            cnx.prepareStatement(self, statement, query, false, callback);\n        });\n    }\n};\n\nTransaction.prototype.execute = function(query, params, callback, custom) {\n\n    if (params instanceof Function) {\n        callback = params;\n        params = undefined;\n    }\n\n    var self = this;\n    this.newStatement(query, function(err, statement) {\n\n        if (err) {\n            doError(err, callback);\n            return;\n        }\n\n        function dropError(err) {\n            statement.release();\n            doCallback(err, callback);\n        }\n\n        statement.execute(self, params, function(err) {\n\n            if (err) {\n                dropError(err);\n                return;\n            }\n\n            switch (statement.type) {\n\n                case isc_info_sql_stmt_select:\n                    statement.fetchAll(self, function(err, ret) {\n\n                        if (err) {\n                            dropError(err);\n                            return;\n                        }\n\n                        statement.release();\n\n                        if (callback)\n                            callback(undefined, ret, statement.output, true);\n\n                    });\n\n                    break;\n\n                case isc_info_sql_stmt_exec_procedure:\n                    if (statement.output.length) {\n                        statement.fetch(self, 1, function(err, ret) {\n                            if (err) {\n                                dropError(err);\n                                return;\n                            }\n\n                            statement.release();\n\n                            if (callback)\n                                callback(undefined, ret.data[0], statement.output, false);\n                        });\n\n                        break;\n                    }\n\n                // Fall through is normal\n                default:\n                    statement.release();\n                    if (callback)\n                        callback()\n                    break;\n            }\n\n        }, custom);\n    });\n};\n\nTransaction.prototype.query = function(query, params, callback) {\n\n    if (params instanceof Function) {\n        callback = params;\n        params = undefined;\n    }\n\n    if (callback === undefined)\n        callback = noop;\n\n    this.execute(query, params, callback, { asObject: true, asStream: callback === undefined || callback === null });\n\n};\n\nTransaction.prototype.commit = function(callback) {\n    this.connection.commit(this, callback);\n};\n\nTransaction.prototype.rollback = function(callback) {\n    this.connection.rollback(this, callback);\n};\n\nTransaction.prototype.commitRetaining = function(callback) {\n    this.connection.commitRetaining(this, callback);\n};\n\nTransaction.prototype.rollbackRetaining = function(callback) {\n    this.connection.rollbackRetaining(this, callback);\n};\n\n/***************************************\n *\n *   Database\n *\n ***************************************/\n\nfunction Database(connection) {\n    this.connection = connection;\n    connection.db = this;\n}\n\nDatabase.prototype.__proto__ = Object.create(Events.EventEmitter.prototype, {\n    constructor: {\n        value: Database,\n        enumberable: false\n    }\n});\n\nDatabase.prototype.escape = function(value) {\n    return exports.escape(value);\n};\n\nDatabase.prototype.detach = function(callback, force) {\n\n    var self = this;\n\n    if (!force && self.connection._pending.length > 0) {\n        self.connection._detachAuto = true;\n        self.connection._detachCallback = callback;\n        return self;\n    }\n\n    if (self.connection._pooled == false) {\n        self.connection.detach(function (err, obj) {\n\n            self.connection.disconnect();\n            self.emit('detach', false);\n\n            if (callback)\n                callback(err, obj);\n\n        }, force);\n    } else {\n        self.emit('detach', false);\n        if (callback)\n            callback();\n    }\n\n    return self;\n};\n\nDatabase.prototype.transaction = function(isolation, callback) {\n    return this.startTransaction(isolation, callback);\n};\n\nDatabase.prototype.startTransaction = function(isolation, callback) {\n    this.connection.startTransaction(isolation, callback);\n    return this;\n};\n\nDatabase.prototype.newStatement = function (query, callback) {\n\n    this.startTransaction(function(err, transaction) {\n\n        if (err) {\n            callback(err);\n            return;\n        }\n\n        transaction.newStatement(query, function(err, statement) {\n\n            if (err) {\n                callback(err);\n                return;\n            }\n\n            transaction.commit(function(err) {\n                callback(err, statement);\n            });\n        });\n    });\n\n    return this;\n};\n\nDatabase.prototype.execute = function(query, params, callback, custom) {\n\n    if (params instanceof Function) {\n        callback = params;\n        params = undefined;\n    }\n\n    var self = this;\n\n    self.connection.startTransaction(function(err, transaction) {\n\n        if (err) {\n            doError(err, callback);\n            return;\n        }\n\n        transaction.execute(query, params, function(err, result, meta, isSelect) {\n            if (err) {\n                transaction.rollback(function() {\n                    doError(err, callback);\n                });\n                return;\n            }\n\n            transaction.commit(function(err) {\n                if (callback)\n                    callback(err, result, meta, isSelect);\n            });\n\n        }, custom);\n    });\n\n    return self;\n};\n\nDatabase.prototype.sequentially = function(query, params, on, callback, asArray) {\n\n    if (params instanceof Function) {\n        asArray = callback;\n        callback = on;\n        on = params;\n        params = undefined;\n    }\n\n    if (on === undefined)\n        throw new Error('Expected \"on\" delegate.');\n\n    var self = this;\n    self.execute(query, params, callback, { asObject: !asArray, asStream: true, on: on });\n    return self;\n};\n\nDatabase.prototype.query = function(query, params, callback) {\n\n    if (params instanceof Function) {\n        callback = params;\n        params = undefined;\n    }\n\n    var self = this;\n    self.execute(query, params, callback, { asObject: true, asStream: callback === undefined || callback === null });\n    return self;\n};\n\nexports.attach = function(options, callback) {\n\n    var host = options.host || DEFAULT_HOST;\n    var port = options.port || DEFAULT_PORT;\n    var manager = options.manager || false;\n    var cnx = this.connection = new Connection(host, port, function(err) {\n\n        if (err) {\n            doError(err, callback);\n            return;\n        }\n\n        cnx.connect(options.database || options.filename, function(err) {\n            if (err) {\n                doError(err, callback);\n            } else {\n                if (manager)\n                    cnx.svcattach(options, callback);\n                else\n                    cnx.attach(options, callback);\n            }\n        });\n\n    }, options);\n};\n\nexports.create = function(options, callback) {\n    var host = options.host || DEFAULT_HOST;\n    var port = options.port || DEFAULT_PORT;\n    var cnx = this.connection = new Connection(host, port, function(err) {\n        cnx.connect(options.database || options.filename, function(err) {\n\n            if (err) {\n                self.db.emit('error', err);\n                doError(err, callback);\n                return;\n            }\n\n            cnx.createDatabase(options, callback);\n        });\n    }, options);\n};\n\nexports.attachOrCreate = function(options, callback) {\n\n    var host = options.host || DEFAULT_HOST;\n    var port = options.port || DEFAULT_PORT;\n\n    var cnx = this.connection = new Connection(host, port, function(err) {\n\n        var self = cnx;\n\n        if (err) {\n            callback({ error: err, message: \"Connect error\" });\n            return;\n        }\n\n        cnx.connect(options.database || options.filename, function(err) {\n\n            if (err) {\n                doError(err, callback);\n                return;\n            }\n\n            cnx.attach(options, function(err, ret) {\n\n                if (!err) {\n                    if (self.db)\n                        self.db.emit('connect', ret);\n                    doCallback(ret, callback);\n                    return;\n                }\n\n                cnx.createDatabase(options, callback);\n            });\n        });\n\n    }, options);\n};\n\n/***************************************\n *\n *   Service Manager\n *\n ***************************************/\n\nfunction ServiceManager(connection) {\n    this.connection = connection;\n    connection.svc = this;\n}\n\nServiceManager.prototype.__proto__ = Object.create(Events.EventEmitter.prototype, {\n    constructor: {\n        value: ServiceManager,\n        enumberable: false\n    }\n});\n\nServiceManager.prototype._createOutputStream = function (optread, buffersize, callback) {\n    var self = this;\n    optread = optread || 'byline';\n    var t = new stream.Readable({ objectMode: optread == 'byline'?true:false }); // chunk by line\n    t.__proto__._read = function () {\n        var selfread = this;\n        var fct = optread == 'byline'?self.readline:self.readeof;\n        fct.call(self, { buffersize: buffersize }, function (err, data) {\n            if (err) {\n                selfread.push(err.message, DEFAULT_ENCODING);\n                return;\n            }\n            if (data.line && data.line.length)\n                selfread.push(data.line, DEFAULT_ENCODING);\n            else\n                selfread.push(null);\n        });\n    }\n\n    callback(null, t);\n}\n\n\nServiceManager.prototype._infosmapping = {\n    \"50\"/*isc_info_svc_svr_db_info*/ : \"dbinfo\",\n    \"51\"/*isc_info_svc_get_license*/ : \"licenses\",\n    \"52\"/*isc_info_svc_get_license_mask*/ : \"licenseoptions\",\n    \"53\"/*isc_info_svc_get_config*/ : \"fbconfig\",\n    \"54\"/*isc_info_svc_version*/ : \"svcversion\",\n    \"55\"/*isc_info_svc_server_version*/ : \"fbversion\",\n    \"56\"/*isc_info_svc_implementation*/ : \"fbimplementation\",\n    \"57\"/*isc_info_svc_capabilities*/ : \"fbcapatibilities\",\n    \"58\"/*isc_info_svc_user_dbpath*/ : \"pathsecuritydb\",\n    \"59\"/*isc_info_svc_get_env*/ : \"fbenv\",\n    \"60\"/*isc_info_svc_get_env_lock*/ : \"fbenvlock\",\n    \"61\"/*isc_info_svc_get_env_msg*/ : \"fbenvmsg\",\n    \"62\"/*isc_info_svc_line*/ : \"\",\n    \"63\"/*isc_info_svc_to_eof*/ : \"\",\n    \"64\"/*isc_info_svc_timeout*/ : \"\",\n    \"65\"/*isc_info_svc_get_licensed_users*/ : \"\",\n    \"66\"/*isc_info_svc_limbo_trans*/ : \"\",\n    \"67\"/*isc_info_svc_running*/ : \"\",\n    \"68\"/*isc_info_svc_get_users*/ : \"fbusers\",\n    \"78\"/*isc_info_svc_stdin*/ : \"\"\n};\n\nServiceManager.prototype._processcapabilities = function (blr, res) {\n    var capArray = [\n        \"WAL_SUPPORT\",\n        \"MULTI_CLIENT_SUPPORT\",\n        \"REMOTE_HOP_SUPPORT\",\n        \"NO_SVR_STATS_SUPPORT\",\n        \"NO_DB_STATS_SUPPORT\",\n        \"LOCAL_ENGINE_SUPPORT\",\n        \"NO_FORCED_WRITE_SUPPORT\",\n        \"NO_SHUTDOWN_SUPPORT\",\n        \"NO_SERVER_SHUTDOWN_SUPPORT\",\n        \"SERVER_CONFIG_SUPPORT\",\n        \"QUOTED_FILENAME_SUPPORT\"\n    ];\n    var dbcapa = res[this._infosmapping[57]] = [];\n    var caps = blr.readInt32();\n\n\tfor (var i = 0; i < capArray.length; ++i)\n\t\tif (caps & (1 << i))\n            dbcapa.push(capArray[i]);\n}\n\nServiceManager.prototype._processdbinfo = function (blr, res) {\n    var tinfo = blr.readByteCode();\n    var dbinfo = res[this._infosmapping[50]] = {};\n\n    dbinfo.database = [];\n    for (; tinfo != isc_info_flag_end; tinfo = blr.readByteCode()) {\n        switch (tinfo) {\n            case isc_spb_dbname:\n                dbinfo.database.push(blr.readString());\n                break;\n            case isc_spb_num_att:\n                dbinfo.nbattachment = blr.readInt32();\n                break;\n            case isc_spb_num_db:\n                dbinfo.nbdatabase = blr.readInt32();\n                break;\n        }\n    }\n}\n\nServiceManager.prototype._processquery = function (buffer, callback) {\n    //console.log(buffer);\n    var br = new BlrReader(buffer);\n    var tinfo = br.readByteCode();\n    var res = {};\n    res.result = 0;\n    for (; tinfo != isc_info_end; tinfo = br.readByteCode()) {\n        switch (tinfo) {\n            case isc_info_svc_server_version:\n            case isc_info_svc_implementation:\n            case isc_info_svc_user_dbpath:\n            case isc_info_svc_get_env:\n            case isc_info_svc_get_env_lock:\n            case isc_info_svc_get_env_msg:\n                res[this._infosmapping[tinfo]] = br.readString();\n                break;\n            case isc_info_svc_version:\n                res[this._infosmapping[tinfo]] = br.readInt32();\n                break;\n            case isc_info_svc_svr_db_info:\n                this._processdbinfo(br, res);\n                break;\n            case isc_info_svc_limbo_trans:\n                // not implemented\n                for (; tinfo != isc_info_flag_end; tinfo = br.readByteCode())\n                break;\n            case isc_info_svc_get_users:\n                br.pos += 2\n                res[this._infosmapping[tinfo]] = [];\n                break;\n            case isc_spb_sec_username:\n                var tuser = res[this._infosmapping[68]];\n                tuser.push({});\n                tuser[tuser.length - 1].username = br.readString();\n                break;\n            case isc_spb_sec_firstname:\n                var tuser = res[this._infosmapping[68]];\n                var user = tuser[tuser.length-1];\n                user.firstname = br.readString();\n                break;\n            case isc_spb_sec_middlename:\n                var tuser = res[this._infosmapping[68]];\n                var user = tuser[tuser.length-1];\n                user.middlename = br.readString();\n                break;\n            case isc_spb_sec_lastname:\n                var tuser = res[this._infosmapping[68]];\n                var user = tuser[tuser.length-1];\n                user.lastname = br.readString();\n                break;\n            case isc_spb_sec_groupid:\n                var tuser = res[this._infosmapping[68]];\n                var user = tuser[tuser.length-1];\n                user.groupid = br.readInt32();\n                break;\n            case isc_spb_sec_userid:\n                var tuser = res[this._infosmapping[68]];\n                var user = tuser[tuser.length-1];\n                user.userid = br.readInt32();\n\n                break;\n            case isc_spb_sec_admin:\n                var tuser = res[this._infosmapping[68]];\n                var user = tuser[tuser.length-1];\n                user.admin = br.readInt32();\n                break;\n\n            case isc_info_svc_line:\n                res.line = br.readString();\n                break;\n\n            case isc_info_svc_to_eof:\n                res.line = br.readString();\n                break;\n\n            case isc_info_truncated:\n                res.result = 1; // too much data for the result buffer increase size of it (buffersize parameter))\n                break;\n\n            case isc_info_data_not_ready:\n                res.result = 2;\n                break;\n\n            case isc_info_svc_timeout:\n                res.result = 3;\n                break;\n\n            case isc_info_svc_stdin:\n\n                break;\n\n            case isc_info_svc_capabilities:\n                this._processcapabilities(br, res);\n                break;\n        }\n    }\n    callback(null, res);\n}\n\nServiceManager.prototype.detach = function(callback, force) {\n    var self = this;\n\n    if (!force && self.connection._pending.length > 0) {\n        self.connection._detachAuto = true;\n        self.connection._detachCallback = callback;\n        return self;\n    }\n\n    self.connection.svcdetach(function (err, obj) {\n\n        self.connection.disconnect();\n        self.emit('detach', false);\n\n        if (callback)\n            callback(err, obj);\n\n    }, force);\n\n    return self;\n}\n\nServiceManager.prototype.backup = function (options, callback) {\n    var dbpath = options.database || this.connection.options.filename || this.connection.options.database;\n    var verbose = options.verbose || false;\n    // format of bckfile {filename:'name', sizefile:''} sizefile is length of part in bytes\n    var bckfiles = options.backupfiles || options.files || null;\n    // for convenience\n    if (bckfiles) bckfiles = bckfiles.constructor !== Array?[{ filename: bckfiles, sizefile: '0' }]:bckfiles;\n    var factor = options.factor || 0; //If backing up to a physical tape device, this switch lets you specify the tape's blocking factor\n    var ignorechecksums = options.ignorechecksums || false;\n    var ignorelimbo = options.ignorelimbo || false;\n    var metadataonly = options.metadataonly || false;\n    var nogarbagecollect = options.nogarbasecollect || false;\n    var olddescriptions = options.olddescriptions || false;\n    var nontransportable = options.nontransportable || false;\n    var convert = options.convert || false;\n    var expand = options.expand || false;\n    var notriggers = options.notriggers || false;\n\n    if (dbpath == null || dbpath.length == 0) {\n        doError(new Error('No database specified'), callback);\n        return;\n    }\n\n    if (bckfiles == null || bckfiles.length == 0) {\n        doError(new Error('No backup path specified'), callback);\n        return;\n    }\n\n    var blr = this.connection._blr;\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_backup);\n    blr.addString2(isc_spb_dbname, dbpath, DEFAULT_ENCODING);\n    for (var i = 0; i < bckfiles.length; i++) {\n        blr.addString2(isc_spb_bkp_file, bckfiles[i].filename, DEFAULT_ENCODING);\n        if (i != bckfiles.length - 1) // not the end, so we need to write the size of this part (gsplit)\n            blr.addString2(isc_spb_bkp_length, bckfiles[i].sizefile, DEFAULT_ENCODING);\n    }\n    if (factor)\n        blr.addByteInt32(isc_spb_bkp_factor, factor);\n\n    var opts = 0;\n    if (ignorechecksums) opts = opts | isc_spb_bkp_ignore_checksums;\n    if (ignorelimbo) opts = opts | isc_spb_bkp_ignore_limbo;\n    if (metadataonly) opts = opts | isc_spb_bkp_metadata_only;\n    if (nogarbagecollect) opts = opts | isc_spb_bkp_no_garbage_collect;\n    if (olddescriptions) opts = opts | isc_spb_bkp_old_descriptions;\n    if (nontransportable) opts = opts | isc_spb_bkp_non_transportable;\n    if (convert) opts = opts | isc_spb_bkp_convert;\n    if (expand) opts = opts | isc_spb_bkp_expand;\n    if (notriggers) opts = opts | isc_spb_bkp_no_triggers;\n    if (opts)\n        blr.addByteInt32(isc_spb_options, opts);\n    if (verbose)\n        blr.addByte(isc_spb_verbose);\n    var self = this;\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.nbackup = function (options, callback) {\n    var dbpath = options.database || this.connection.options.filename || this.connection.options.database;\n    var bckfile = options.backupfile || options.file || null;\n    var level = options.level || 0; // nb day for incremental\n    var notriggers = options.notriggers || false;\n    var direct = options.direct || 'on'; // on or off direct write I/O\n\n    if (dbpath == null || dbpath.length == 0) {\n        doError(new Error('No database specified'), callback);\n        return;\n    }\n\n    if (bckfile == null || bckfile.length == 0) {\n        doError(new Error('No backup path specified'), callback);\n        return;\n    }\n\n    var blr = this.connection._blr;\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_nba);\n    blr.addString2(isc_spb_dbname, dbpath, DEFAULT_ENCODING);\n    blr.addString2(isc_spb_dbname, bckfile, DEFAULT_ENCODING);\n    blr.addByteInt32(isc_spb_nbk_level, level);\n    blr.addString2(isc_spb_nbk_direct, direct, DEFAULT_ENCODING);\n    var opts = 0;\n    if (notriggers) opts = opts | isc_spb_nbk_no_triggers;\n    blr.addByteInt32(isc_spb_options, opts);\n    var self = this;\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.restore = function(options, callback) {\n    var bckfiles = options.backupfiles || options.files || null; // format bckfiles ['file1', 'file2', 'file3']\n    // for convenience\n    if (bckfiles) bckfiles = bckfiles.constructor !== Array?[bckfiles]:bckfiles;\n    var dbfile = options.database || this.connection.options.filename || this.connection.options.database;;\n    var verbose = options.verbose || false;\n    var cachebuffers = options.cachebuffers || 2048; // gbak -buffers\n    var pagesize = options.pagesize || 4096; // gbak -page_size\n    var readonly = options.readonly || false; // gbak -mode\n    var deactivateindexes = options.deactivateindexes || false;\n    var\tnoshadow = options.noshadow || false;\n    var\tnovalidity = options.novalidity || false;\n    var\tindividualcommit = options.individualcommit || true; // otherwise no data\n    var\treplace = options.replace || false;\n    var\tcreate = options.create || true;\n    var useallspace = options.useallspace || false;\n    var metadataonly = options.metadataonly || false;\n    var fixfssdata = options.fixfssdata || null;\n    var fixfssmetadata = options.fixfssmetadata || null;\n\n    if (bckfiles == null || bckfiles.length == 0) {\n        doError(new Error('No backup file specified'), callback);\n        return;\n    }\n\n    if (dbfile == null || dbfile.length == 0) {\n        doError(new Error('No database path specified'), callback);\n        return;\n    }\n\n    var blr = this.connection._blr;\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_restore);\n    for (var i = 0; i < bckfiles.length; i++) {\n        blr.addString2(isc_spb_bkp_file, bckfiles[i], DEFAULT_ENCODING);\n    }\n    blr.addString2(isc_spb_dbname, dbfile, DEFAULT_ENCODING);\n    blr.addByte(isc_spb_res_buffers);\n    blr.addInt32(cachebuffers);\n    blr.addByte(isc_spb_res_page_size);\n    blr.addInt32(pagesize);\n    blr.addByte(isc_spb_res_access_mode);\n    if (readonly)\n        blr.addByte(isc_spb_prp_am_readonly);\n    else\n        blr.addByte(isc_spb_prp_am_readwrite);\n    if (fixfssdata) blr.addString2(isc_spb_res_fix_fss_data, fixfssdata, DEFAULT_ENCODING);\n    if (fixfssmetadata) blr.addString2(isc_spb_res_fix_fss_metadata, fixfssmetadata, DEFAULT_ENCODING);\n    var opts = 0;\n    if (deactivateindexes) opts = opts | isc_spb_res_deactivate_idx;\n    if (noshadow) opts = opts | isc_spb_res_no_shadow;\n    if (novalidity) opts = opts | isc_spb_res_no_validity;\n    if (individualcommit) opts = opts | isc_spb_res_one_at_a_time;\n    if (replace) opts = opts | isc_spb_res_replace;\n    if (create) opts = opts | isc_spb_res_create;\n    if (useallspace) opts = opts | isc_spb_res_use_all_space;\n    if (metadataonly) opts = opts | isc_spb_res_fix_fss_metadata;\n    if (opts)\n        blr.addByteInt32(isc_spb_options, opts);\n    if (verbose)\n        blr.addByte(isc_spb_verbose);\n    var self = this;\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.nrestore = function (options, callback) {\n    var bckfiles = options.backupfiles || options.files || null; // format bckfiles ['file1', 'file2', 'file3']\n    // for convenience\n    if (bckfiles) bckfiles = bckfiles.constructor !== Array?[bckfiles]:bckfiles;\n    var dbpath = options.database || this.connection.options.filename || this.connection.options.database;;\n\n    if (bckfiles == null || bckfiles.length == 0) {\n        doError(new Error('No backup file specified'), callback);\n        return;\n    }\n\n    if (dbpath == null || dbfile.length == 0) {\n        doError(new Error('No database path specified'), callback);\n        return;\n    }\n    var blr = this.connection._blr;\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_nrest);\n    for (var i = 0; i < bckfiles.length; i++) {\n        blr.addString2(isc_spb_nbk_file, bckfiles[i], DEFAULT_ENCODING);\n    }\n    blr.addString2(isc_spb_dbname, dbpath, DEFAULT_ENCODING);\n    var self = this;\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\n// only one at time don't use this function directly\nServiceManager.prototype._fixpropertie = function (options, callback) {\n    var dbpath = options.database || this.connection.options.filename || this.connection.options.database;\n    var dialect = options.dialect || null;\n    var sweep = options.sweepinterval || null;\n    var pagebuffers = options.nbpagebuffers || null;\n    var online = options.bringonline || false;\n    var shutdown = options.shutdown || null; // 0 Forced, 1 deny transaction, 2 deny attachment\n    var shutdowndelay = options.shutdowndelay || 0;\n    var shutdownmode = options.shutdownmode || null; // 0 normal 1 multi 2 single 3 full\n    var shadow = options.activateshadow || false;\n    var forcewrite = options.forcewrite!=null?options.forcewrite:null;\n    var reservespace = options.reservespace!=null?options.reservespace:null;\n    var accessmode = options.accessmode!=null?options.accesmode:null; // 0 readonly 1 readwrite\n\n    if (dbpath == null || dbpath.length == 0) {\n        doError(new Error('No database specified'), callback);\n        return;\n    }\n\n    var blr = this.connection._blr;\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_properties);\n    blr.addString2(isc_spb_dbname, dbpath, DEFAULT_ENCODING);\n    if (dialect) blr.addByteInt32(isc_spb_prp_set_sql_dialect, dialect);\n    if (sweep) blr.addByteInt32(isc_spb_prp_sweep_interval, sweep);\n    if (pagebuffers) blr.addByteInt32(isc_spb_prp_page_buffers, pagebuffers);\n    if (shutdown) {\n        switch (shutdown) {\n            case 0:\n                blr.addByteInt32(isc_spb_prp_shutdown_db, shutdowndelay);\n                break;\n            case 1:\n                blr.addByteInt32(isc_spb_prp_deny_new_transactions, shutdowndelay);\n                break;\n            case 2:\n                blr.addByteInt32(isc_spb_prp_deny_new_attachments, shutdowndelay);\n                break;\n        }\n        if (shutdownmode != null) {\n            switch (shutdownmode) {\n                case 0:\n                    blr.addByteInt32(isc_spb_prp_shutdown_mode, isc_spb_prp_sm_normal);\n                    break;\n                case 1:\n                    blr.addByteInt32(isc_spb_prp_shutdown_mode, isc_spb_prp_sm_multi);\n                    break;\n                case 2:\n                    blr.addByteInt32(isc_spb_prp_shutdown_mode, isc_spb_prp_sm_single);\n                    break;\n                case 3:\n                    blr.addByteInt32(isc_spb_prp_shutdown_mode, isc_spb_prp_sm_full);\n                    break;\n            }\n        }\n    }\n    if (forcewrite) blr.addBytes([isc_spb_prp_write_mode, isc_spb_prp_wm_sync]);\n    if (forcewrite != null && !forcewrite) blr.addBytes([isc_spb_prp_write_mode, isc_spb_prp_wm_async]);\n    if (accessmode) blr.addBytes([isc_spb_prp_access_mode, isc_spb_prp_am_readwrite]);\n    if (accessmode != null && !accessmode) blr.addBytes([isc_spb_prp_access_mode, isc_spb_prp_am_readonly]);\n    if (reservespace) blr.addBytes([isc_spb_prp_reserve_space, sc_spb_prp_res]);\n    if (reservespace != null && !reservespace) blr.addBytes([isc_spb_prp_reserve_space, isc_spb_prp_res_use_full]);\n    var opts = 0;\n    if (shadow) opts = opts | sc_spb_prp_activate;\n    if (online) opts = opts | isc_spb_prp_db_online;\n    if (opts)\n        blr.addByteInt32(isc_spb_options, opts);\n    var self = this;\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.setDialect = function (db, dialect, callback) {\n    this._fixpropertie({ database: db, dialect: dialect }, callaback);\n}\n\nServiceManager.prototype.setSweepinterval = function (db, sweepinterval, callback) {\n    this._fixpropertie({ database: db, sweepinterval: sweepinterval }, callback);\n}\n\nServiceManager.prototype.setCachebuffer = function (db, nbpages, callback) {\n    this._fixpropertie({ database: db, nbpagebuffers: nbpages }, callback);\n}\n\nServiceManager.prototype.BringOnline = function (db, callback) {\n    this._fixpropertie({ database: db, bringonline: true }, callback);\n}\n\nServiceManager.prototype.Shutdown = function (db, kind, delay, mode, callback) {\n    // mode parameter is for server version >= 2.0\n    this._fixpropertie({ database: db, shutdown: kind, shutdowndelay: delay, shutdownmode: mode }, callback);\n}\n\nServiceManager.prototype.setShadow = function (db, val, callback) {\n    this._fixpropertie({ database: db, activateshadow : val }, callback);\n}\n\nServiceManager.prototype.setForcewrite = function (db, val, callback) {\n    this._fixpropertie({ database: db, forcewrite : val }, callback);\n}\n\nServiceManager.prototype.setReservespace = function (db, val, callback) {\n    this._fixpropertie({ database: db, reservespace : val }, callback);\n}\n\nServiceManager.prototype.setReadonlyMode = function (db, callback) {\n    this._fixpropertie({ database: db, accessmode : 0 }, callback);\n}\n\nServiceManager.prototype.setReadwriteMode = function (db, callback) {\n    this._fixpropertie({ database: db, accessmode : 1 }, callback);\n}\n\nServiceManager.prototype.validate = function (options, callback) {\n    var dbpath = options.database || this.connection.options.filename || this.connection.options.database;\n    var checkdb = options.checkdb || false;\n    var ignorechecksums = options.ignorechecksums || false;\n    var killshadows = options.killshadows || false;\n    var mend = options.mend || false;\n    var validate = options.validate || false;\n    var full = options.full || false;\n    var sweep = options.sweep || false;\n    var listlimbo = options.listlimbo || false;\n    var icu = options.icu || false;\n\n    if (dbpath == null || dbpath.length == 0) {\n        doError(new Error('No database specified'), callback);\n        return;\n    }\n\n    var blr = this.connection._blr;\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_repair);\n    blr.addString2(isc_spb_dbname, dbpath, DEFAULT_ENCODING);\n    var opts = 0;\n    if (checkdb) opts = opts | isc_spb_rpr_check_db;\n    if (ignorechecksums) opts = opts | isc_spb_rpr_ignore_checksum;\n    if (killshadows) opts = opts | isc_spb_rpr_kill_shadows;\n    if (mend) opts = opts | isc_spb_rpr_mend_db;\n    if (validate) opts = opts | isc_spb_rpr_validate_db;\n    if (full) opts = opts | isc_spb_rpr_full;\n    if (sweep) opts = opts | isc_spb_rpr_sweep_db;\n    if (listlimbo) opts = opts | isc_spb_rpr_list_limbo_trans;\n    if (icu) opts = opts | isc_spb_rpr_icu;\n    blr.addByteInt32(isc_spb_options, opts);\n    var self = this;\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.commit = function(db, transactid, callback) {\n    var dbpath = db || this.connection.options.filename || this.connection.options.database;\n    if (dbpath == null || dbpath.length == 0) {\n        doError(new Error('No database specified'), callback);\n        return;\n    }\n\n    var blr = this.connection._blr;\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_repair);\n    blr.addString2(isc_spb_dbname, dbpath, DEFAULT_ENCODING);\n    blr.addByteInt32(isc_spb_rpr_commit_trans, transactid);\n    var self = this;\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.rollback = function (db, transactid, callback) {\n    var dbpath = db || this.connection.options.filename || this.connection.options.database;\n    if (dbpath == null || dbpath.length == 0) {\n        doError(new Error('No database specified'), callback);\n        return;\n    }\n\n    var blr = this.connection._blr;\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_repair);\n    blr.addString2(isc_spb_dbname, dbpath, DEFAULT_ENCODING);\n    blr.addByteInt32(isc_spb_rpr_rollback_trans, transactid);\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.recover = function (db, transactid, callback) {\n    var dbpath = db || this.connection.options.filename || this.connection.options.database;\n    if (dbpath == null || dbpath.length == 0) {\n        doError(new Error('No database specified'), callback);\n        return;\n    }\n\n    var blr = this.connection._blr;\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_repair);\n    blr.addString2(isc_spb_dbname, dbpath, DEFAULT_ENCODING);\n    blr.addByteInt32(isc_spb_rpr_recover_two_phase, transactid);\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.getStats = function (options, callback) {\n    var dbpath = options.database || this.connection.options.filename || this.connection.options.database;\n    var record = options.record || false;\n    var nocreation = options.nocreation || false;\n    var tables = options.tables || false;\n    var pages = options.pages || false;\n    var header = options.header || false;\n    var indexes = options.indexes || false;\n    var tablesystem = options.tablesystem || false;\n    var encryption = options.encryption || false;\n    var objects = options.objects || null; // space-separated list of object index,table,systemtable\n    if (dbpath == null || dbpath.length == 0) {\n        doError(new Error('No database specified'), callback);\n        return;\n    }\n\n    var blr = this.connection._blr;\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_db_stats);\n    blr.addString2(isc_spb_dbname, dbpath, DEFAULT_ENCODING);\n    var opts = 0;\n    if (record) opts = opts | isc_spb_sts_record_versions;\n    if (nocreation) opts = opts | isc_spb_sts_nocreation;\n    if (tables) opts = opts | isc_spb_sts_table;\n    if (pages) opts = opts | isc_spb_sts_data_pages;\n    if (header) opts = opts | isc_spb_sts_hdr_pages;\n    if (indexes) opts = opts | isc_spb_sts_idx_pages;\n    if (tablesystem) opts = opts | isc_spb_sts_sys_relations;\n    if (encryption) opts = opts | isc_spb_sts_encryption;\n    if (opts)\n        blr.addByteInt32(isc_spb_options, opts);\n    if (objects) blr.addString2(isc_spb_command_line, objects, DEFAULT_ENCODING);\n    var self = this;\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n\n}\n\nServiceManager.prototype.getLog = function (options, callback) {\n    var self = this;\n    var blr = this.connection._blr;\n    var optread = options.optread || 'byline';\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_get_fb_log);\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.getUsers = function (username, callback) {\n    var self = this;\n    var blr = this.connection._blr;\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_display_user);\n    if (username) blr.addString2(isc_spb_sec_username, username, DEFAULT_ENCODING);\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self.readusers({}, callback);\n    });\n}\n\nServiceManager.prototype.addUser = function (username, password, options, callback) {\n    var rolename = options.rolename || null;\n    var groupname = options.groupname || null;\n    var firsname = options.firstname || null;\n    var middlename = options.middlename || null;\n    var lastname = options.lastname || null;\n    var userid = options.userid || null;\n    var groupid = options.groupid || null;\n    var admin = options.admin || null;\n\n    var blr = this.connection._blr;\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_add_user);\n    blr.addString2(isc_spb_sec_username, username, DEFAULT_ENCODING);\n    blr.addString2(isc_spb_sec_password, password, DEFAULT_ENCODING);\n    if (rolename) blr.addString2(isc_dpb_sql_role_name, rolename, DEFAULT_ENCODING);\n    if (groupname) blr.addString2(isc_spb_sec_groupname, groupname, DEFAULT_ENCODING);\n    if (firsname) blr.addString2(isc_spb_sec_firstname, firsname, DEFAULT_ENCODING);\n    if (middlename) blr.addString2(isc_spb_sec_middlename, middlename, DEFAULT_ENCODING);\n    if (lastname) blr.addString2(isc_spb_sec_lastname, lastname, DEFAULT_ENCODING);\n    if (userid != null) blr.addByteInt32(isc_spb_sec_userid, userid);\n    if (groupid != null) blr.addByteInt32(isc_spb_sec_groupid, groupid);\n    if (admin != null) blr.addByteInt32(isc_spb_sec_admin, admin);\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.editUser = function (username, options, callback) {\n    var rolename = options.rolename || null;\n    var groupname = options.groupname || null;\n    var firsname = options.firstname || null;\n    var middlename = options.middlename || null;\n    var lastname = options.lastname || null;\n    var userid = options.userid || null;\n    var groupid = options.groupid || null;\n    var admin = options.admin || null;\n\tvar password = options.password || null;\n    var blr = this.connection._blr;\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_modify_user);\n    blr.addString2(isc_spb_sec_username, username, DEFAULT_ENCODING);\n    if (password) blr.addString2(isc_spb_sec_password, password, DEFAULT_ENCODING);\n    if (rolename) blr.addString2(isc_dpb_sql_role_name, rolename, DEFAULT_ENCODING);\n    if (groupname) blr.addString2(isc_spb_sec_groupname, groupname, DEFAULT_ENCODING);\n    if (firsname) blr.addString2(isc_spb_sec_firstname, firsname, DEFAULT_ENCODING);\n    if (middlename) blr.addString2(isc_spb_sec_middlename, middlename, DEFAULT_ENCODING);\n    if (lastname) blr.addString2(isc_spb_sec_lastname, lastname, DEFAULT_ENCODING);\n    if (userid != null) blr.addByteInt32(isc_spb_sec_userid, userid);\n    if (groupid != null) blr.addByteInt32(isc_spb_sec_groupid, groupid);\n    if (admin != null) blr.addByteInt32(isc_spb_sec_admin, admin);\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.removeUser = function (username, rolename, callback) {\n    var blr = this.connection._blr;\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_delete_user);\n    blr.addString2(isc_spb_sec_username, username, DEFAULT_ENCODING);\n    if (rolename) blr.addString2(isc_dpb_sql_role_name, rolename, DEFAULT_ENCODING);\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.getFbserverInfos = function (infos, options, callback) {\n    var buffersize = options.buffersize || 2048;\n    var timeout = options.timeout || 1;\n    var opts = {\n        \"dbinfo\" : isc_info_svc_svr_db_info,\n        \"fbconfig\" : isc_info_svc_get_config,\n        \"svcversion\" : isc_info_svc_version,\n        \"fbversion\" : isc_info_svc_server_version,\n        \"fbimplementation\" : isc_info_svc_implementation,\n        \"fbcapatibilities\" : isc_info_svc_capabilities,\n        \"pathsecuritydb\" : isc_info_svc_user_dbpath,\n        \"fbenv\" : isc_info_svc_get_env,\n        \"fbenvlock\" : isc_info_svc_get_env_lock,\n        \"fbenvmsg\" : isc_info_svc_get_env_msg\n    };\n    // if infos is empty all options are asked to the service\n\n    var tops = [];\n    for (popts in opts)\n        if (infos[popts] || infos.length == 0)\n            tops.push(opts[popts]);\n\n\n    var self = this;\n    this.connection.svcquery(tops, buffersize, timeout, function (err, data) {\n        if (err || !data.buffer) {\n            doError(new Error(err||'Bad query return'), callback);\n            return;\n        }\n        self._processquery(data.buffer, callback);\n    });\n}\n\nServiceManager.prototype.startTrace = function (options, callback) {\n    var self = this;\n    var blr = this.connection._blr;\n    var configfile = options.configfile || '';\n    var tracename = options.tracename || '';\n\n    if (configfile.length == 0) {\n        doError(new Error('No config filename specified'), callback);\n        return;\n    }\n    if (tracename.length == 0) {\n        doError(new Error('No tracename specified'), callback);\n        return;\n    }\n\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_trace_start);\n    blr.addString2(isc_spb_trc_cfg, configfile, DEFAULT_ENCODING);\n    blr.addString2(isc_spb_trc_name, tracename, DEFAULT_ENCODING);\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.suspendTrace = function (options, callback) {\n    var self = this;\n    var blr = this.connection._blr;\n    var traceid = options.traceid || null;\n    var tracename = options.tracename || '';\n\n    if (traceid == null) {\n        doError(new Error('No traceid specified'), callback);\n        return;\n    }\n    if (tracename.length == 0) {\n        doError(new Error('No tracename specified'), callback);\n        return;\n    }\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_trace_suspend);\n    blr.addString2(isc_spb_trc_name, tracename, DEFAULT_ENCODING);\n    blr.addByteInt32(isc_spb_trc_id, traceid);\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.resumeTrace = function (options, callback) {\n    var self = this;\n    var blr = this.connection._blr;\n    var traceid = options.traceid || null;\n    var tracename = options.tracename || '';\n\n    if (traceid == null) {\n        doError(new Error('No traceid specified'), callback);\n        return;\n    }\n    if (tracename.length == 0) {\n        doError(new Error('No tracename specified'), callback);\n        return;\n    }\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_trace_resume);\n    blr.addString2(isc_spb_trc_name, tracename, DEFAULT_ENCODING);\n    blr.addByteInt32(isc_spb_trc_id, traceid);\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error('Invalid RESUMETRACE Action'), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.stopTrace = function (options, callback) {\n    var self = this;\n    var blr = this.connection._blr;\n    var traceid = options.traceid || null;\n    var tracename = options.tracename || '';\n\n    if (traceid == null) {\n        doError(new Error('No traceid specified'), callback);\n        return;\n    }\n\n    if (tracename.length == 0) {\n        doError(new Error('No tracename specified'), callback);\n        return;\n    }\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_trace_stop);\n    blr.addString2(isc_spb_trc_name, tracename, DEFAULT_ENCODING);\n    blr.addByteInt32(isc_spb_trc_id, traceid);\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.getTraceList = function (options, callback) {\n    var self = this;\n    var blr = this.connection._blr;\n    var optread = options.optread || 'byline';\n    blr.pos = 0;\n    blr.addByte(isc_action_svc_trace_list);\n    this.connection.svcstart(blr, function (err, data) {\n        if (err) {\n            doError(new Error(err), callback);\n            return;\n        }\n        self._createOutputStream(options.optread, options.buffersize, callback);\n    });\n}\n\nServiceManager.prototype.readline = function (options, callback) {\n    var buffersize = options.buffersize || 2048;\n    var timeout = options.timeout || 60;\n    var self = this;\n    this.connection.svcquery([isc_info_svc_line], buffersize, timeout, function (err, data) {\n        if (err || !data.buffer) {\n            doError(new Error(err||'Bad query return'), callback);\n            return;\n        }\n        self._processquery(data.buffer, callback);\n    });\n}\n\nServiceManager.prototype.readeof = function (options, callback) {\n    var buffersize = options.buffersize || (8 * 1024);\n    var timeout = options.timeout || 60;\n    var self = this;\n    this.connection.svcquery([isc_info_svc_to_eof], buffersize, timeout, function (err, data) {\n        if (err || !data.buffer) {\n            doError(new Error(err||'Bad query return'), callback);\n            return;\n        }\n        self._processquery(data.buffer, callback);\n    });\n}\n\nServiceManager.prototype.hasRunningAction = function (options, callback) {\n    var buffersize = options.buffersize || 2048;\n    var timeout = options.timeout || 60;\n    var self = this;\n    this.connection.svcquery([isc_info_svc_running], buffersize, timeout, function (err, data) {\n        if (err || !data.buffer) {\n            doError(new Error(err||'Bad query return'), callback);\n            return;\n        }\n        self._processquery(data.buffer, callback);\n    });\n}\n\nServiceManager.prototype.readusers = function (options, callback) {\n    var buffersize = options.buffersize || 2048;\n    var timeout = options.timeout || 60;\n    var self = this;\n    this.connection.svcquery([isc_info_svc_get_users], buffersize, timeout, function (err, data) {\n        if (err || !data.buffer) {\n            doError(new Error(err||'Bad query return'), callback);\n            return;\n        }\n        self._processquery(data.buffer, callback);\n    });\n}\n\nServiceManager.prototype.readlimbo = function (options, callback) {\n    var buffersize = options.buffersize || 2048;\n    var timeout = options.timeout || 60;\n    var self = this;\n    this.connection.svcquery([isc_info_svc_limbo_trans], buffersize, timeout, function (err, data) {\n        if (err || !data.buffer) {\n            doError(new Error(err||'Bad query return'), callback);\n            return;\n        }\n        self._processquery(data.buffer, callback);\n    });\n}\n\n// Pooling\nexports.pool = function(max, options, callback) {\n    var pool = new Pool(max, options);\n    options.isPool = true;\n    return pool;\n};\n\n/***************************************\n *\n *   Simple Pooling\n *\n ***************************************/\n\nfunction Pool(max, options) {\n    this.internaldb = []; // connection created by the pool (for destroy)\n    this.pooldb = []; // available connection in the pool\n    this.dbinuse = 0; // connection currently in use into the pool\n    this.max = max || 4;\n    this.pending = [];\n    this.options = options;\n}\n\nPool.prototype.get = function(callback) {\n    var self = this;\n    self.pending.push(callback);\n    self.check();\n    return self;\n};\n\nPool.prototype.check = function() {\n\n    var self = this;\n    if (self.dbinuse >= self.max)\n        return self;\n\n    var cb = self.pending.shift();\n    if (!cb)\n        return self;\n    self.dbinuse++;\n    if (self.pooldb.length) {\n        cb(null, self.pooldb.shift());\n    } else {\n        exports.attach(self.options, function (err, db) {\n            if (!err) {\n                self.internaldb.push(db);\n                db.on('detach', function () {\n                    // also in pool (could be a twice call to detach)\n                    if (self.pooldb.indexOf(db) != -1 || self.internaldb.indexOf(db) == -1)\n                        return;\n                    // if not usable don't put in again in the pool and remove reference on it\n                    if (db.connection._isClosed || db.connection._isDetach || db.connection._pooled == false)\n                        self.internaldb.splice(self.internaldb.indexOf(db), 1);\n                    else\n                        self.pooldb.push(db);\n\n                    if (db.connection._pooled)\n                        self.dbinuse--;\n                    self.check();\n                });\n            } else {\n                // attach fail so not in the pool\n                self.dbinuse--;\n            }\n\n            cb(err, db);\n        });\n    }\n    setImmediate(function() {\n        self.check();\n    });\n\n    return self;\n};\n\nPool.prototype.destroy = function() {\n    var self = this;\n    this.internaldb.forEach(function(db) {\n        if (db.connection._pooled == false)\n            return;\n        // check if the db is not free into the pool otherwise user should manual detach it\n        var _db_in_pool = self.pooldb.indexOf(db);\n        if (_db_in_pool != -1) {\n            self.pooldb.splice(_db_in_pool, 1);\n            db.connection._pooled = false;\n            db.detach();\n        }\n    });\n};\n\n/***************************************\n *\n *   Connection\n *\n ***************************************/\n\nvar Connection = exports.Connection = function (host, port, callback, options, db, svc) {\n    var self = this;\n    this.db = db;\n    this.svc = svc\n    this._msg = new XdrWriter(32);\n    this._blr = new BlrWriter(32);\n    this._queue = [];\n    this._detachTimeout;\n    this._detachCallback;\n    this._detachAuto;\n    this._socket = net.createConnection(port, host);\n    this._pending = [];\n    this._isClosed = false;\n    this._isDetach = false;\n    this._isUsed = false;\n    this._pooled = options.isPool||false;\n    this.options = options;\n    this._bind_events(host, port, callback);\n    this.error;\n    this._max_cached_query = options.maxCachedQuery || -1;\n    this._cache_query = options.cacheQuery?{}:null;\n};\n\nexports.Connection.prototype._setcachedquery = function (query, statement) {\n    if (this._cache_query)\n        if (this._max_cached_query == -1 || this._max_cached_query > Object.keys(this._cache_query).length)\n            this._cache_query[query] = statement;\n};\n\nexports.Connection.prototype.getCachedQuery = function (query) {\n    if (this._cache_query)\n        return this._cache_query[query];\n    return null;\n};\n\nexports.Connection.prototype._bind_events = function(host, port, callback) {\n\n    var self = this;\n\n    self._socket.on('close', function() {\n\n        self._isClosed = true;\n\n        if (self._isDetach)\n            return;\n\n        if (!self.db) {\n            if (callback)\n                callback(self.error);\n            return;\n        }\n\n        setImmediate(function() {\n\n            self._socket = null;\n            self._msg = null;\n            self._blr = null;\n\n            var ctx = new Connection(host, port, function(err) {\n                ctx.connect(self.options.filename, function(err) {\n\n                    if (err) {\n                        self.emit('error', err);\n                        return;\n                    }\n\n                    ctx.attach(self.options, function(err) {\n\n                        if (err) {\n                            self.emit('error', err);\n                            return;\n                        }\n\n                        ctx._queue = ctx._queue.concat(self._queue);\n                        ctx._pending = ctx._pending.concat(self._pending);\n                        self.db.emit('reconnect');\n\n                    }, self.db);\n                });\n\n            }, self.options, self.db);\n        });\n\n    });\n\n    self._socket.on('error', function(e) {\n\n        self.error = e;\n\n        if (self.db)\n            self.db.emit('error', e)\n\n        if (callback)\n            callback(e);\n\n    });\n\n    self._socket.on('connect', function() {\n        self._isClosed = false;\n        self._isOpened = true;\n        if (callback)\n            callback();\n    });\n\n    self._socket.on('data', function(data) {\n        var obj, cb, pos, xdr, buf;\n\n        if (!self._xdr) {\n            xdr = new XdrReader(data);\n        } else {\n            xdr = self._xdr;\n            delete(self._xdr);\n            buf = new Buffer(data.length + xdr.buffer.length);\n            xdr.buffer.copy(buf);\n            data.copy(buf, xdr.buffer.length);\n            xdr.buffer = buf;\n        }\n\n        while (xdr.pos < xdr.buffer.length) {\n\n            pos = xdr.pos;\n\n            try {\n                cb = self._queue[0];\n                obj = decodeResponse(xdr, cb, self.db, self._lowercase_keys);\n                if (obj && obj.error) {\n                    // packet is not complete\n                    xdr.buffer = xdr.buffer.slice(xdr.pos);\n                    xdr.pos = 0;\n                    self._xdr = xdr;\n                    return;\n                }\n                // remove the op flag, needed for partial packet\n                if (xdr.r) delete(xdr.r);\n\n            } catch(err) {\n                xdr.buffer = xdr.buffer = xdr.buffer.slice(pos);\n                xdr.pos = 0;\n                self._xdr = xdr;\n                return;\n            }\n\n            self._queue.shift();\n            self._pending.shift();\n\n            if (obj && obj.status) {\n\n                messages.lookupMessages(obj.status, function(message) {\n                    obj.message = message;\n                    doCallback(obj, cb);\n                });\n\n            } else\n                doCallback(obj, cb);\n        }\n\n        if (!self._detachAuto || self._pending.length !== 0)\n            return;\n\n        clearTimeout(self._detachTimeout);\n        self._detachTimeout = setTimeout(function() {\n            self.db.detach(self._detachCallback);\n            self._detachAuto = false;\n        }, 100);\n\n    });\n}\n\nexports.Connection.prototype.disconnect = function() {\n    this._socket.end();\n};\n\nfunction decodeResponse(data, callback, db, lowercase_keys){\n    do {\n        var r = data.r || data.readInt();\n    } while (r === op_dummy);\n\n    var item, op;\n\n    switch (r) {\n        case op_response:\n\n            var response;\n\n            if (callback)\n                response = callback.response || {};\n            else\n                response = {};\n\n            response.handle = data.readInt();\n            var oid = data.readQuad();\n            if (oid.low || oid.high)\n                response.oid = oid\n\n            var buf = data.readArray();\n            if (buf)\n                response.buffer = buf;\n\n            var num;\n            while (true) {\n                op = data.readInt();\n                switch (op){\n                    case isc_arg_end:\n                        return response;\n                    case isc_arg_gds:\n                        num = data.readInt();\n                        if (!num)\n                            break;\n                        item = { gdscode: num };\n                        if (response.status)\n                            response.status.push(item);\n                        else\n                            response.status = [item];\n                        break;\n                    case isc_arg_string:\n                    case isc_arg_interpreted:\n                    case isc_arg_sql_state:\n\n                        if (item.params) {\n                            var str = data.readString(DEFAULT_ENCODING);\n                            item.params.push(str);\n                        } else\n                            item.params = [data.readString(DEFAULT_ENCODING)];\n\n                        break;\n\n                    case isc_arg_number:\n                        num = data.readInt();\n\n                        if (item.params)\n                            item.params.push(num);\n                        else\n                            item.params = [num];\n\n                        if (item.gdscode === isc_sqlerr)\n                            response.sqlcode = num;\n\n                        break;\n\n                    default:\n                        throw new Error('Unexpected: ' + op);\n                }\n            }\n            break;\n\n        case op_fetch_response:\n            var statement = callback.statement;\n            var output = statement.output;\n            var custom = statement.custom || {};\n            statement.nbrowsfetched = statement.nbrowsfetched || 0;\n\n            if (data.fop) { // could be set when a packet is not complete\n                op = data.readInt(); // ??\n                data.fop = false;\n            }\n            data.fstatus = data.fstatus!==undefined?data.fstatus:data.readInt();\n            data.fcount = data.fcount!==undefined?data.fcount:data.readInt();\n            data.fcolumn = data.fcolumn || 0;\n            data.frow = data.frow || (custom.asObject ? {} : new Array(output.length));\n            data.frows = data.frows || [];\n\n            if (custom.asObject && !data.fcols) {\n                data.fcols = [];\n                for (var i = 0, length = output.length; i < length; i++)\n                    data.fcols.push(lowercase_keys ? output[i].alias.toLowerCase() : output[i].alias);\n            }\n\n            while (data.fcount && (data.fstatus !== 100)) {\n\n                for (length = output.length; data.fcolumn < length; data.fcolumn++) {\n                    item = output[data.fcolumn];\n                    try {\n                        var _xdrpos = data.pos;\n                        var value = item.decode(data);\n                        if (custom.asObject) {\n                            if (item.type === SQL_BLOB)\n                                value = fetch_blob_async(statement, value, data.fcols[data.fcolumn]);\n                            data.frow[data.fcols[data.fcolumn]] = value;\n                        }\n                        else {\n                            if (item.type === SQL_BLOB)\n                                value = fetch_blob_async(statement, value, data.fcolumn);\n                            data.frow[data.fcolumn] = value;\n                        }\n                    } catch (e) {\n                        // uncomplete packet read\n                        data.pos = _xdrpos;\n                        data.r = r;\n                        return { error : new Error(\"Packet is not complete\") };\n                    }\n\n                }\n\n                data.fcolumn = 0;\n                statement.connection.db.emit('row', data.frow, statement.nbrowsfetched, custom.asObject);\n\n                if (!custom.asStream)\n                    data.frows.push(data.frow);\n                if (custom.on)\n                    custom.on(data.frow, statement.nbrowsfetched);\n                data.frow = custom.asObject?{}:new Array(output.length);\n\n                try {\n                    delete data.fstatus;\n                    delete data.fcount;\n                    var _xdrpos = data.pos;\n                    op = data.readInt(); // ??\n                    data.fstatus = data.readInt();\n                    data.fcount = data.readInt();\n\n                } catch (e) {\n                    if (_xdrpos == data.pos)\n                        data.fop = true;\n                    data.r = r;\n                    return { error : new Error(\"Packet is not complete\") };\n                }\n                statement.nbrowsfetched++;\n            }\n\n            statement.connection.db.emit('result', data.frows);\n            return { data: data.frows, fetched: Boolean(data.fstatus === 100) };\n\n        case op_accept:\n            if (data.readInt() !== PROTOCOL_VERSION10 || data.readInt() !== ARCHITECTURE_GENERIC || data.readInt() !== ptype_batch_send)\n                throw new Error('Invalid connect result');\n            return {};\n\n        default:\n            throw new Error('Unexpected:' + r);\n    }\n}\n\nConnection.prototype._queueEvent = function(callback){\n    var self = this;\n\n    if (self._isClosed) {\n        if (callback)\n            callback(new Error('Connection is closed.'));\n        return;\n    }\n\n    self._queue.push(callback);\n    self._socket.write(self._msg.getData());\n};\n\nConnection.prototype.connect = function (database, callback) {\n\n    var msg = this._msg;\n    var blr = this._blr;\n\n    msg.pos = 0;\n    blr.pos = 0;\n\n    msg.addInt(op_connect);\n    msg.addInt(op_attach);\n    msg.addInt(CONNECT_VERSION2);\n    msg.addInt(ARCHITECTURE_GENERIC);\n    msg.addString(database || '', DEFAULT_ENCODING);\n    msg.addInt(1);  // Protocol version understood count.\n\n    blr.addString(1, process.env['USER'] || process.env['USERNAME'] || 'Unknown', DEFAULT_ENCODING);\n    var hostname = os.hostname();\n    blr.addString(4, hostname, DEFAULT_ENCODING);\n    blr.addBytes([6, 0]);\n    msg.addBlr(this._blr);\n\n    msg.addInt(PROTOCOL_VERSION10);\n    msg.addInt(ARCHITECTURE_GENERIC);\n    msg.addInt(2);  // Min type\n    msg.addInt(3);  // Max type\n    msg.addInt(2);  // Preference weight\n\n    this._queueEvent(callback);\n};\n\nConnection.prototype.attach = function (options, callback, db) {\n    this._lowercase_keys = options.lowercase_keys || DEFAULT_LOWERCASE_KEYS;\n    var database = options.database || options.filename;\n    var user = options.user || DEFAULT_USER;\n    var password = options.password || DEFAULT_PASSWORD;\n    var role = options.role;\n    var self = this;\n    var msg = this._msg;\n    var blr = this._blr;\n    msg.pos = 0;\n    blr.pos = 0;\n\n    blr.addByte(1);\n    blr.addString(isc_dpb_lc_ctype, 'UTF8', DEFAULT_ENCODING);\n    blr.addString(isc_dpb_user_name, user, DEFAULT_ENCODING);\n    blr.addString(isc_dpb_password, password, DEFAULT_ENCODING);\n\n    if (role)\n        blr.addString(isc_dpb_sql_role_name, role, DEFAULT_ENCODING);\n\n    msg.addInt(op_attach);\n    msg.addInt(0);  // Database Object ID\n    msg.addString(database, DEFAULT_ENCODING);\n    msg.addBlr(this._blr);\n\n    var self = this;\n\n    function cb(err, ret) {\n\n        if (err) {\n            doError(err, callback);\n            return;\n        }\n\n        self.dbhandle = ret.handle;\n        if (callback)\n            callback(undefined, ret);\n    }\n\n    // For reconnect\n    if (db) {\n        db.connection = this;\n        cb.response = db;\n    } else {\n        cb.response = new Database(this);\n        cb.response.removeAllListeners('error');\n        cb.response.on('error', noop);\n    }\n\n    this._queueEvent(cb);\n};\n\nConnection.prototype.detach = function (callback) {\n\n    var self = this;\n\n    if (self._isClosed)\n        return;\n\n    self._isUsed = false;\n    self._isDetach = true;\n\n    var msg = self._msg;\n\n    msg.pos = 0;\n    msg.addInt(op_detach);\n    msg.addInt(0); // Database Object ID\n\n    self._queueEvent(function(err, ret) {\n        delete(self.dbhandle);\n        if (callback)\n            callback(err, ret);\n    });\n};\n\nConnection.prototype.createDatabase = function (options, callback) {\n\n    var database = options.database || options.filename;\n    var user = options.user || DEFAULT_USER;\n    var password = options.password || DEFAULT_PASSWORD;\n    var pageSize = options.pageSize || DEFAULT_PAGE_SIZE;\n    var role = options.role;\n    var blr = this._blr;\n\n    blr.pos = 0;\n    blr.addByte(1);\n    blr.addString(isc_dpb_set_db_charset, 'UTF8', DEFAULT_ENCODING);\n    blr.addString(isc_dpb_lc_ctype, 'UTF8', DEFAULT_ENCODING);\n    blr.addString(isc_dpb_user_name, user, DEFAULT_ENCODING);\n    blr.addString(isc_dpb_password, password, DEFAULT_ENCODING);\n\n    if (role)\n        blr.addString(isc_dpb_sql_role_name, role, DEFAULT_ENCODING);\n\n    blr.addNumeric(isc_dpb_sql_dialect, 3);\n    blr.addNumeric(isc_dpb_force_write, 1);\n    blr.addNumeric(isc_dpb_overwrite, 1);\n    blr.addNumeric(isc_dpb_page_size, pageSize);\n\n    var msg = this._msg;\n    msg.pos = 0;\n    msg.addInt(op_create);  // op_create\n    msg.addInt(0);          // Database Object ID\n    msg.addString(database, DEFAULT_ENCODING);\n    msg.addBlr(blr);\n\n    var self = this;\n\n    function cb(err, ret) {\n\n        if (ret)\n            self.dbhandle = ret.handle;\n\n        setImmediate(function() {\n            if (self.db)\n                self.db.emit('attach', ret);\n        });\n\n        if (callback)\n            callback(err, ret);\n    }\n\n    cb.response = new Database(this);\n    this._queueEvent(cb);\n};\n\nConnection.prototype.throwClosed = function(callback) {\n    var err = new Error('Connection is closed.');\n    this.db.emit('error', err);\n    if (callback)\n        callback(err);\n    return this;\n};\n\nConnection.prototype.startTransaction = function(isolation, callback) {\n\n    if (typeof(isolation) === 'function') {\n        var tmp = isolation;\n        isolation = callback;\n        callback = tmp;\n    }\n\n    if (this._isClosed)\n        return this.throwClosed(callback);\n\n    // for auto detach\n    this._pending.push('startTransaction');\n\n    var blr = this._blr;\n    var msg = this._msg;\n\n    blr.pos = 0;\n    msg.pos = 0;\n\n    if (isolation instanceof Function) {\n        callback = isolation;\n        isolation = null;\n    }\n\n    blr.addBytes(isolation || ISOLATION_REPEATABLE_READ);\n    msg.addInt(op_transaction);\n    msg.addInt(this.dbhandle);\n    msg.addBlr(blr);\n    callback.response = new Transaction(this);\n\n    this.db.emit('transaction', isolation);\n    this._queueEvent(callback);\n};\n\nConnection.prototype.commit = function (transaction, callback) {\n\n    if (this._isClosed)\n        return this.throwClosed(callback);\n\n    // for auto detach\n    this._pending.push('commit');\n\n    var msg = this._msg;\n    msg.pos = 0;\n    msg.addInt(op_commit);\n    msg.addInt(transaction.handle);\n    this.db.emit('commit');\n    this._queueEvent(callback);\n};\n\nConnection.prototype.rollback = function (transaction, callback) {\n\n    if (this._isClosed)\n        return this.throwClosed(callback);\n\n    // for auto detach\n    this._pending.push('rollback');\n\n    var msg = this._msg;\n    msg.pos = 0;\n    msg.addInt(op_rollback);\n    msg.addInt(transaction.handle);\n    this.db.emit('rollback');\n    this._queueEvent(callback);\n};\n\nConnection.prototype.commitRetaining = function (transaction, callback) {\n\n    if (this._isClosed)\n        throw new Error('Connection is closed.');\n\n    // for auto detach\n    this._pending.push('commitRetaining');\n\n    var msg = this._msg;\n    msg.pos = 0;\n    msg.addInt(op_commit_retaining);\n    msg.addInt(transaction.handle);\n    this._queueEvent(callback);\n};\n\nConnection.prototype.rollbackRetaining = function (transaction, callback) {\n\n    if (this._isClosed)\n        return this.throwClosed(callback);\n\n    // for auto detach\n    this._pending.push('rollbackRetaining');\n\n    var msg = this._msg;\n    msg.pos = 0;\n    msg.addInt(op_rollback_retaining);\n    msg.addInt(transaction.handle);\n    this._queueEvent(callback);\n};\n\nConnection.prototype.allocateStatement = function (callback) {\n\n    if (this._isClosed)\n        return this.throwClosed(callback);\n\n    // for auto detach\n    this._pending.push('allocateStatement');\n\n    var msg = this._msg;\n    msg.pos = 0;\n    msg.addInt(op_allocate_statement);\n    msg.addInt(this.dbhandle);\n    callback.response = new Statement(this);\n    this._queueEvent(callback);\n};\n\nConnection.prototype.dropStatement = function (statement, callback) {\n\n    if (this._isClosed)\n        return this.throwClosed(callback);\n\n    // for auto detach\n    this._pending.push('dropStatement');\n\n    var msg = this._msg;\n    msg.pos = 0;\n    msg.addInt(op_free_statement);\n    msg.addInt(statement.handle);\n    msg.addInt(DSQL_drop);\n    this._queueEvent(callback);\n};\n\nConnection.prototype.closeStatement = function (statement, callback) {\n\n    if (this._isClosed)\n        return this.throwClosed(callback);\n\n    // for auto detach\n    this._pending.push('closeStatement');\n\n    var msg = this._msg;\n    msg.pos = 0;\n    msg.addInt(op_free_statement);\n    msg.addInt(statement.handle);\n    msg.addInt(DSQL_close);\n    this._queueEvent(callback);\n};\n\nfunction describe(ret, statement){\n\n    var br = new BlrReader(ret.buffer);\n    var parameters = null;\n    var type, param;\n\n    while (br.pos < br.buffer.length) {\n        switch (br.readByteCode()) {\n            case isc_info_sql_stmt_type:\n                statement.type = br.readInt();\n                break;\n            case isc_info_sql_get_plan:\n                statement.plan = br.readString(DEFAULT_ENCODING);\n                break;\n            case isc_info_sql_select:\n                statement.output = parameters = [];\n                break;\n            case isc_info_sql_bind:\n                statement.input = parameters = [];\n                break;\n            case isc_info_sql_num_variables:\n                br.readInt(); // eat int\n                break;\n            case isc_info_sql_describe_vars:\n                if (!parameters) {return}\n                br.readInt(); // eat int ?\n                var finishDescribe = false;\n                param = null;\n                while (!finishDescribe){\n                    switch (br.readByteCode()) {\n                        case isc_info_sql_describe_end:\n                            break;\n                        case isc_info_sql_sqlda_seq:\n                            var num = br.readInt();\n                            break;\n                        case isc_info_sql_type:\n                            type = br.readInt();\n                            switch (type&~1) {\n                                case SQL_VARYING:   param = new SQLVarString(); break;\n                                case SQL_NULL:      param = new SQLVarNull(); break;\n                                case SQL_TEXT:      param = new SQLVarText(); break;\n                                case SQL_DOUBLE:    param = new SQLVarDouble(); break;\n                                case SQL_FLOAT:\n                                case SQL_D_FLOAT:   param = new SQLVarFloat(); break;\n                                case SQL_TYPE_DATE: param = new SQLVarDate(); break;\n                                case SQL_TYPE_TIME: param = new SQLVarTime(); break;\n                                case SQL_TIMESTAMP: param = new SQLVarTimeStamp(); break;\n                                case SQL_BLOB:      param = new SQLVarBlob(); break;\n                                case SQL_ARRAY:     param = new SQLVarArray(); break;\n                                case SQL_QUAD:      param = new SQLVarQuad(); break;\n                                case SQL_LONG:      param = new SQLVarInt(); break;\n                                case SQL_SHORT:     param = new SQLVarShort(); break;\n                                case SQL_INT64:     param = new SQLVarInt64(); break;\n                                case SQL_BOOLEAN:   param = new SQLVarBoolean(); break;\n                                default:\n                                    throw new Error('Unexpected');\n                            }\n                            parameters[num-1] = param;\n                            param.type = type;\n                            param.nullable = Boolean(param.type & 1);\n                            param.type &= ~1;\n                            break;\n                        case isc_info_sql_sub_type:\n                            param.subType = br.readInt();\n                            break;\n                        case isc_info_sql_scale:\n                            param.scale = br.readInt();\n                            break;\n                        case isc_info_sql_length:\n                            param.length = br.readInt();\n                            break;\n                        case isc_info_sql_null_ind:\n                            param.nullable = Boolean(br.readInt());\n                            break;\n                        case isc_info_sql_field:\n                            param.field = br.readString(DEFAULT_ENCODING);\n                            break;\n                        case isc_info_sql_relation:\n                            param.relation = br.readString(DEFAULT_ENCODING);\n                            break;\n                        case isc_info_sql_owner:\n                            param.owner = br.readString(DEFAULT_ENCODING);\n                            break;\n                        case isc_info_sql_alias:\n                            param.alias = br.readString(DEFAULT_ENCODING);\n                            break;\n                        case isc_info_sql_relation_alias:\n                            param.relationAlias = br.readString(DEFAULT_ENCODING);\n                            break;\n                        case isc_info_truncated:\n                            throw new Error('Truncated');\n                        default:\n                            finishDescribe = true;\n                            br.pos--;\n                    }\n                }\n        }\n    }\n}\n\nConnection.prototype.prepareStatement = function (transaction, statement, query, plan, callback) {\n\n    if (this._isClosed)\n        return this.throwClosed(callback);\n\n    var msg = this._msg;\n    var blr = this._blr;\n\n    msg.pos = 0;\n    blr.pos = 0;\n\n    if (plan instanceof Function) {\n        callback = plan;\n        plan = false;\n    }\n\n    blr.addBytes(DESCRIBE);\n\n    if (plan)\n        blr.addByte(isc_info_sql_get_plan);\n\n    msg.addInt(op_prepare_statement);\n    msg.addInt(transaction.handle);\n    msg.addInt(statement.handle);\n    msg.addInt(3); // dialect = 3\n    msg.addString(query, DEFAULT_ENCODING);\n    msg.addBlr(blr);\n    msg.addInt(65535); // buffer_length\n\n    var self = this;\n\n    this._queueEvent(function(err, ret) {\n\n        if (!err) {\n            describe(ret, statement);\n            statement.query = query;\n            self.db.emit('query', query);\n            ret = statement;\n            self._setcachedquery(query, ret);\n        }\n\n        if (callback)\n            callback(err, ret);\n    });\n\n};\n\nfunction CalcBlr(blr, xsqlda) {\n    blr.addBytes([blr_version5, blr_begin, blr_message, 0]); // + message number\n    blr.addWord(xsqlda.length * 2);\n\n    for (var i = 0, length = xsqlda.length; i < length; i++) {\n        xsqlda[i].calcBlr(blr);\n        blr.addByte(blr_short);\n        blr.addByte(0);\n    }\n\n    blr.addByte(blr_end);\n    blr.addByte(blr_eoc);\n}\n\nConnection.prototype.executeStatement = function(transaction, statement, params, callback, custom) {\n\n    if (this._isClosed)\n        return this.throwClosed(callback);\n\n    // for auto detach\n    this._pending.push('executeStatement');\n\n    if (params instanceof Function) {\n        callback = params;\n        params = undefined;\n    }\n\n    var self = this;\n\n    function PrepareParams(params, input, callback) {\n\n        var value, meta;\n        var ret = new Array(params.length);\n        var wait = params.length;\n\n        function done() {\n            wait--;\n            if (wait === 0)\n                callback(ret);\n        }\n\n        function putBlobData(index, value, callback) {\n\n            self.createBlob2(transaction, function(err, blob) {\n\n                var b;\n                var isStream = value.readable;\n\n                if (Buffer.isBuffer(value))\n                    b = value;\n                else if (typeof(value) === 'string')\n                    b = new Buffer(value, DEFAULT_ENCODING)\n                else if (!isStream)\n                    b = new Buffer(JSON.stringify(value), DEFAULT_ENCODING)\n\n                if (Buffer.isBuffer(b)) {\n                    bufferReader(b, 1024, function(b, next) {\n                        self.batchSegments(blob, b, next);\n                    }, function() {\n                        ret[index] = new SQLParamQuad(blob.oid);\n                        self.closeBlob(blob, callback);\n                    });\n                    return;\n                }\n\n                var isReading = false;\n                var isEnd = false;\n\n                value.on('data', function(chunk) {\n                    value.pause();\n                    isReading = true;\n                    bufferReader(chunk, 1024, function(b, next) {\n                        self.batchSegments(blob, b, next);\n                    }, function() {\n                        isReading = false;\n\n                        if (isEnd) {\n                            ret[index] = new SQLParamQuad(blob.oid);\n                            self.closeBlob(blob, callback);\n                        } else\n                            value.resume();\n                    });\n                });\n\n                value.on('end', function() {\n                    isEnd = true;\n                    if (isReading)\n                        return;\n                    ret[index] = new SQLParamQuad(blob.oid);\n                    self.closeBlob(blob, callback);\n                });\n            });\n        }\n\n        for (var i = 0, length = params.length; i < length; i++) {\n            value = params[i];\n            meta = input[i];\n\n            if (value === null || value === undefined) {\n                switch (meta.type) {\n                    case SQL_VARYING:\n                    case SQL_NULL:\n                    case SQL_TEXT:\n                        ret[i] = new SQLParamString(null);\n                        break;\n                    case SQL_DOUBLE:\n                    case SQL_FLOAT:\n                    case SQL_D_FLOAT:\n                        ret[i] = new SQLParamDouble(null);\n                        break;\n                    case SQL_TYPE_DATE:\n                    case SQL_TYPE_TIME:\n                    case SQL_TIMESTAMP:\n                        ret[i] = new SQLParamDate(null);\n                        break;\n                    case SQL_BLOB:\n                    case SQL_ARRAY:\n                    case SQL_QUAD:\n                        ret[i] = new SQLParamQuad(null);\n                        break;\n                    case SQL_LONG:\n                    case SQL_SHORT:\n                    case SQL_INT64:\n                    case SQL_BOOLEAN:\n                        ret[i] = new SQLParamInt(null);\n                        break;\n                    default:\n                        ret[i] = null;\n                }\n                done();\n            } else {\n                switch (meta.type) {\n                    case SQL_BLOB:\n                        putBlobData(i, value, done);\n                        break;\n\n                    case SQL_TIMESTAMP:\n                    case SQL_TYPE_DATE:\n                    case SQL_TYPE_TIME:\n\n                        if (value instanceof Date)\n                            ret[i] = new SQLParamDate(value);\n                        else if (typeof(value) === 'string')\n                            ret[i] = new SQLParamDate(value.parseDate());\n                        else\n                            ret[i] = new SQLParamDate(new Date(value));\n\n                        done();\n                        break;\n\n                    default:\n                        switch (typeof value) {\n                            case 'number':\n                                if (value % 1 === 0) {\n                                    if (value >= MIN_INT && value <= MAX_INT)\n                                        ret[i] = new SQLParamInt(value);\n                                    else\n                                        ret[i] = new SQLParamInt64(value);\n                                } else\n                                    ret[i] = new SQLParamDouble(value);\n                                break;\n                            case 'string':\n                                ret[i] = new SQLParamString(value);\n                                break;\n                            case 'boolean':\n                                ret[i] = new SQLParamBool(value);\n                                break;\n                            default:\n                                //throw new Error('Unexpected parametter: ' + JSON.stringify(params) + ' - ' + JSON.stringify(input));\n                                ret[i] = new SQLParamString(value.toString());\n                                break;\n                        }\n                        done();\n                }\n            }\n        }\n    }\n\n    var input = statement.input;\n\n    if (input.length) {\n\n        if (!(params instanceof Array)) {\n            if (params !== undefined)\n                params = [params];\n            else\n                params = [];\n        }\n\n        if (params === undefined || params.length !== input.length) {\n            self._pending.pop();\n            callback(new Error('Expected parameters: (params=' + params.length + ' vs. expected=' + input.length + ') - ' + statement.query));\n            return;\n        }\n\n        PrepareParams(params, input, function(prms) {\n\n            var msg = self._msg;\n            var blr = self._blr;\n            msg.pos = 0;\n            blr.pos = 0;\n            CalcBlr(blr, prms);\n\n            msg.addInt(op_execute);\n            msg.addInt(statement.handle);\n            msg.addInt(transaction.handle);\n            msg.addBlr(blr);\n            msg.addInt(0); // message number\n            msg.addInt(1); // param count\n\n            for(var i = 0, length = prms.length; i < length; i++)\n                prms[i].encode(msg);\n\n            self._queueEvent(callback);\n        });\n\n        return;\n    }\n\n    var msg = this._msg;\n    var blr = this._blr;\n    msg.pos = 0;\n    blr.pos = 0;\n\n    msg.addInt(op_execute);\n    msg.addInt(statement.handle);\n    msg.addInt(transaction.handle);\n\n    msg.addBlr(blr); // empty\n    msg.addInt(0); // message number\n    msg.addInt(0); // param count\n\n    this._queueEvent(callback);\n};\n\nfunction fetch_blob_async(statement, id, name) {\n\n    if (!id)\n        return null;\n\n    return function(callback) {\n        // callback(err, buffer, name);\n        statement.connection.startTransaction(ISOLATION_READ_UNCOMMITTED, function(err, transaction) {\n\n            if (err) {\n                callback(err);\n                return;\n            }\n\n            statement.connection._pending.push('openBlob');\n            statement.connection.openBlob(id, transaction, function(err, blob) {\n\n                var e = new Events.EventEmitter();\n\n                e.pipe = function(stream) {\n                    e.on('data', function(chunk) {\n                        stream.write(chunk);\n                    });\n                    e.on('end', function() {\n                        stream.end();\n                    });\n                };\n\n                if (err) {\n                    callback(err, name, e);\n                    return;\n                }\n\n                function read() {\n                    statement.connection.getSegment(blob, function(err, ret) {\n\n                        if (err) {\n                            transaction.rollback(function() {\n                                e.emit('error', err);\n                            });\n                            return;\n                        }\n\n                        if (ret.buffer) {\n                            var blr = new BlrReader(ret.buffer);\n                            var data = blr.readSegment();\n\n                            e.emit('data', data);\n                        }\n\n                        if (ret.handle !== 2) {\n                            read();\n                            return;\n                        }\n\n                        statement.connection.closeBlob(blob);\n                        transaction.commit(function(err) {\n                            if (err) {\n                                e.emit('error', err);\n                            } else {\n                                e.emit('end');\n                            }\n                            e = null;\n                        });\n\n                    });\n                }\n\n                callback(err, name, e);\n                read();\n\n            });\n        });\n    };\n}\n\nConnection.prototype.fetch = function(statement, transaction, count, callback) {\n\n    var msg = this._msg;\n    var blr = this._blr;\n\n    msg.pos = 0;\n    blr.pos = 0;\n\n    if (count instanceof Function) {\n        callback = count;\n        count = DEFAULT_FETCHSIZE;\n    }\n\n    msg.addInt(op_fetch);\n    msg.addInt(statement.handle);\n    CalcBlr(blr, statement.output);\n    msg.addBlr(blr);\n    msg.addInt(0); // message number\n    msg.addInt(count || DEFAULT_FETCHSIZE); // fetch count\n\n    if (!transaction) {\n        callback.statement = statement;\n        this._queueEvent(callback);\n        return;\n    }\n\n    callback.statement = statement;\n    this._queueEvent(callback);\n};\n\nConnection.prototype.fetchAll = function(statement, transaction, callback) {\n\n    var self = this;\n    var data;\n    var loop = function(err, ret) {\n\n        if (err) {\n            callback(err);\n            return;\n        }\n\n        if (!data) {\n            data = ret.data;\n        } else {\n            for (var i = 0, length = ret.data.length; i < length; i++)\n                data.push(ret.data[i]);\n        }\n\n        if (ret.fetched)\n            callback(undefined, data);\n        else\n            self.fetch(statement, transaction, DEFAULT_FETCHSIZE, loop);\n    }\n\n    this.fetch(statement, transaction, DEFAULT_FETCHSIZE, loop);\n};\n\nConnection.prototype.openBlob = function(blob, transaction, callback) {\n    var msg = this._msg;\n    msg.pos = 0;\n    msg.addInt(op_open_blob);\n    msg.addInt(transaction.handle);\n    msg.addQuad(blob);\n    this._queueEvent(callback);\n};\n\nConnection.prototype.closeBlob = function(blob, callback) {\n    var msg = this._msg;\n    msg.pos = 0;\n    msg.addInt(op_close_blob);\n    msg.addInt(blob.handle);\n    this._queueEvent(callback);\n};\n\nConnection.prototype.getSegment = function(blob, callback) {\n    var msg = this._msg;\n    msg.pos = 0;\n    msg.addInt(op_get_segment);\n    msg.addInt(blob.handle);\n    msg.addInt(1024); // buffer length\n    msg.addInt(0); // ???\n    this._queueEvent(callback);\n};\n\nConnection.prototype.createBlob2 = function (transaction, callback) {\n    var msg = this._msg;\n    msg.pos = 0;\n    msg.addInt(op_create_blob2);\n    msg.addInt(0);\n    msg.addInt(transaction.handle);\n    msg.addInt(0);\n    msg.addInt(0);\n    this._queueEvent(callback);\n};\n\nConnection.prototype.batchSegments = function(blob, buffer, callback){\n    var msg = this._msg;\n    var blr = this._blr;\n    msg.pos = 0;\n    blr.pos = 0;\n    msg.addInt(op_batch_segments);\n    msg.addInt(blob.handle);\n    msg.addInt(buffer.length + 2);\n    blr.addBuffer(buffer);\n    msg.addBlr(blr);\n    this._queueEvent(callback);\n};\n\nConnection.prototype.svcattach = function (options, callback, svc) {\n    this._lowercase_keys = options.lowercase_keys || DEFAULT_LOWERCASE_KEYS;\n    var database = options.database || options.filename;\n    var user = options.user || DEFAULT_USER;\n    var password = options.password || DEFAULT_PASSWORD;\n    var role = options.role;\n    var self = this;\n    var msg = this._msg;\n    var blr = this._blr;\n    msg.pos = 0;\n    blr.pos = 0;\n\n    blr.addBytes([isc_dpb_version2, isc_dpb_version2]);\n    blr.addString(isc_dpb_lc_ctype, 'UTF8', DEFAULT_ENCODING);\n    blr.addString(isc_dpb_user_name, user, DEFAULT_ENCODING);\n    blr.addString(isc_dpb_password, password, DEFAULT_ENCODING);\n    blr.addByte(isc_dpb_dummy_packet_interval);\n    blr.addByte(4);\n    blr.addBytes([120, 10, 0, 0]); // FROM DOT NET PROVIDER\n    if (role)\n        blr.addString(isc_dpb_sql_role_name, role, DEFAULT_ENCODING);\n\n    msg.addInt(op_service_attach);\n    msg.addInt(0);\n    msg.addString(DEFAULT_SVC_NAME, DEFAULT_ENCODING); // only local for moment\n    msg.addBlr(this._blr);\n\n    var self = this;\n\n    function cb(err, ret) {\n\n        if (err) {\n            doError(err, callback);\n            return;\n        }\n\n        self.svchandle = ret.handle;\n        if (callback)\n            callback(undefined, ret);\n    }\n\n    // For reconnect\n    if (svc) {\n        svc.connection = this;\n        cb.response = svc;\n    } else {\n        cb.response = new ServiceManager(this);\n        cb.response.removeAllListeners('error');\n        cb.response.on('error', noop);\n    }\n\n    this._queueEvent(cb);\n}\n\nConnection.prototype.svcstart = function (spbaction, callback) {\n    var msg = this._msg;\n    var blr = this._blr;\n    msg.pos = 0;\n    msg.addInt(op_service_start);\n    msg.addInt(this.svchandle);\n    msg.addInt(0)\n    msg.addBlr(spbaction);\n    this._queueEvent(callback);\n}\n\nConnection.prototype.svcquery = function (spbquery, resultbuffersize, timeout,callback) {\n    if (resultbuffersize > MAX_BUFFER_SIZE) {\n        doError(new Error('Buffer is too big'), callback);\n        return;\n    }\n\n    var msg = this._msg;\n    var blr = this._blr;\n    msg.pos = 0;\n    blr.pos = 0;\n    blr.addByte(isc_spb_current_version);\n    //blr.addByteInt32(isc_info_svc_timeout, timeout);\n    msg.addInt(op_service_info);\n    msg.addInt(this.svchandle);\n    msg.addInt(0)\n    msg.addBlr(blr);\n    blr.pos = 0\n    blr.addBytes(spbquery);\n    msg.addBlr(blr);\n    msg.addInt(resultbuffersize);\n    this._queueEvent(callback);\n}\n\nConnection.prototype.svcdetach = function (callback) {\n    var self = this;\n\n    if (self._isClosed)\n        return;\n\n    self._isUsed = false;\n    self._isDetach = true;\n\n    var msg = self._msg;\n\n    msg.pos = 0;\n    msg.addInt(op_service_detach);\n    msg.addInt(this.svchandle); // Database Object ID\n\n    self._queueEvent(function (err, ret) {\n        delete (self.svchandle);\n        if (callback)\n            callback(err, ret);\n    });\n}\n\nfunction bufferReader(buffer, max, writer, cb, beg, end) {\n\n    if (!beg)\n        beg = 0;\n\n    if (!end)\n        end = max;\n\n    if (end >= buffer.length)\n        end = undefined;\n\n    var b = buffer.slice(beg, end);\n\n    writer(b, function() {\n\n        if (end === undefined) {\n            cb();\n            return;\n        }\n\n        bufferReader(buffer, max, writer, cb, beg + max, end + max);\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-node-firebird/node_modules/node-firebird/lib/serialize.js":"\nvar Long = require('long');\n\nfunction align(n) {\n    return (n + 3) & ~3;\n}\n\n/***************************************\n *\n *   BLR Writer\n *\n ***************************************/\n\nconst\n    MAX_STRING_SIZE = 255;\n\nvar BlrWriter = exports.BlrWriter = function(size){\n    this.buffer = new Buffer(size || 32);\n    this.pos = 0;\n};\n\nBlrWriter.prototype.addByte = function (b) {\n    this.ensure(1);\n    this.buffer.writeUInt8(b, this.pos);\n    this.pos++;\n};\n\nBlrWriter.prototype.addShort = function (b) {\n    this.ensure(1);\n    this.buffer.writeInt8(b, this.pos);\n    this.pos++;\n};\n\nBlrWriter.prototype.addSmall = function (b) {\n    this.ensure(2);\n    this.buffer.writeInt16LE(b, this.pos);\n    this.pos += 2;\n};\n\nBlrWriter.prototype.addWord = function (b) {\n    this.ensure(2);\n    this.buffer.writeUInt16LE(b, this.pos);\n    this.pos += 2;\n};\n\nBlrWriter.prototype.addInt32 = function (b) {\n    this.ensure(4);\n    this.buffer.writeUInt32LE(b, this.pos);\n    this.pos += 4;\n};\n\nBlrWriter.prototype.addByteInt32 = function (c, b) {\n    this.addByte(c);\n    this.ensure(4);\n    this.buffer.writeUInt32LE(b, this.pos);\n    this.pos += 4;\n};\n\nBlrWriter.prototype.addNumeric = function (c, v) {\n\n    if (v < 256){\n        this.ensure(3);\n        this.buffer.writeUInt8(c, this.pos);\n        this.pos++;\n        this.buffer.writeUInt8(1, this.pos);\n        this.pos++;\n        this.buffer.writeUInt8(v, this.pos);\n        this.pos++;\n        return;\n    }\n\n    this.ensure(6);\n    this.buffer.writeUInt8(c, this.pos);\n    this.pos++;\n    this.buffer.writeUInt8(4, this.pos);\n    this.pos++;\n    this.buffer.writeInt32BE(v, this.pos);\n    this.pos += 4;\n\n};\n\nBlrWriter.prototype.addBytes = function (b) {\n\n    this.ensure(b.length);\n    for (var i = 0, length = b.length; i < length; i++) {\n        this.buffer.writeUInt8(b[i], this.pos);\n        this.pos++;\n    }\n};\n\nBlrWriter.prototype.addString = function (c, s, encoding) {\n    this.addByte(c);\n\n    var len = Buffer.byteLength(s, encoding);\n    if (len > MAX_STRING_SIZE)\n        throw new Error('blr string is too big');\n\n    this.ensure(len + 1);\n    this.buffer.writeUInt8(len, this.pos);\n    this.pos++;\n    this.buffer.write(s, this.pos, len, encoding);\n    this.pos += len;\n};\n\nBlrWriter.prototype.addBuffer = function (b) {\n    this.addSmall(b.length);\n    this.ensure(b.length);\n    b.copy(this.buffer, this.pos);\n    this.pos += b.length;\n};\n\nBlrWriter.prototype.addString2 = function (c, s, encoding) {\n    this.addByte(c);\n    \n    var len = Buffer.byteLength(s, encoding);\n    if (len > MAX_STRING_SIZE* MAX_STRING_SIZE)\n        throw new Error('blr string is too big');\n    \n    this.ensure(len + 2);\n    this.buffer.writeUInt16LE(len, this.pos);\n    this.pos += 2;\n    this.buffer.write(s, this.pos, len, encoding);\n    this.pos += len;\n};\n\nBlrWriter.prototype.addBuffer = function (b) {\n    this.addSmall(b.length);\n    this.ensure(b.length);\n    b.copy(this.buffer, this.pos);\n    this.pos += b.length;\n};\n\n/***************************************\n *\n *   BLR Reader\n *\n ***************************************/\n\nvar BlrReader = exports.BlrReader = function(buffer) {\n    this.buffer = buffer;\n    this.pos = 0;\n};\n\nBlrReader.prototype.readByteCode = function(){\n    return this.buffer.readUInt8(this.pos++);\n};\n\nBlrReader.prototype.readInt32 = function () {\n    var value = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n    return value;\n}\n\nBlrReader.prototype.readInt = function(){\n    var len = this.buffer.readUInt16LE(this.pos);\n    this.pos += 2;\n    var value;\n    switch (len) {\n        case 1:\n            value = this.buffer.readInt8(this.pos);\n            break;\n        case 2:\n            value = this.buffer.readInt16LE(this.pos);\n            break;\n        case 4:\n            value = this.buffer.readInt32LE(this.pos)\n    }\n    this.pos += len;\n    return value;\n};\n\nBlrReader.prototype.readString = function(encoding){\n\n    var len = this.buffer.readUInt16LE(this.pos);\n    var str;\n\n    this.pos += 2;\n    if (len <= 0)\n        return '';\n\n    str = this.buffer.toString(encoding, this.pos, this.pos + len);\n    this.pos += len;\n    return str;\n};\n\nBlrReader.prototype.readSegment = function() {\n\n    var ret, tmp;\n    var len = this.buffer.readUInt16LE(this.pos);\n\n    this.pos += 2;\n\n    while (len > 0) {\n\n        if (ret) {\n            tmp = ret;\n            ret = new Buffer(tmp.length + len);\n            tmp.copy(ret);\n            this.buffer.copy(ret, tmp.length, this.pos, this.pos + len);\n        } else {\n            ret = new Buffer(len);\n            this.buffer.copy(ret, 0, this.pos, this.pos + len);\n        }\n\n        this.pos += len;\n\n        if (this.pos === this.buffer.length)\n            break;\n\n        len = this.buffer.readUInt16LE(this.pos);\n        this.pos += 2;\n    }\n\n    return ret;\n};\n\n/***************************************\n *\n *   XDR Writer\n *\n ***************************************/\n\nvar XdrWriter = exports.XdrWriter = function(size){\n    this.buffer = new Buffer(size || 32);\n    this.pos = 0;\n};\n\nXdrWriter.prototype.ensure = BlrWriter.prototype.ensure = function (len) {\n    var newlen = this.buffer.length;\n\n    while (newlen < this.pos + len)\n        newlen *= 2\n\n    if (this.buffer.length >= newlen)\n        return;\n\n    var b = new Buffer(newlen);\n    this.buffer.copy(b);\n    delete(this.buffer);\n    this.buffer = b;\n};\n\nXdrWriter.prototype.addInt = function (value) {\n    this.ensure(4);\n    this.buffer.writeInt32BE(value, this.pos);\n    this.pos += 4;\n};\n\nXdrWriter.prototype.addInt64 = function (value) {\n    this.ensure(8);\n    var l = Long.fromNumber(value);\n    this.buffer.writeInt32BE(l.high, this.pos);\n    this.pos += 4;\n    this.buffer.writeInt32BE(l.low, this.pos);\n    this.pos += 4;\n};\n\nXdrWriter.prototype.addUInt = function (value) {\n    this.ensure(4);\n    this.buffer.writeUInt32BE(value, this.pos);\n    this.pos += 4;\n};\n\nXdrWriter.prototype.addString = function(s, encoding) {\n    var len = Buffer.byteLength(s, encoding);\n    var alen = align(len);\n    this.ensure(alen + 4);\n    this.buffer.writeInt32BE(len, this.pos);\n    this.pos += 4;\n    this.buffer.write(s, this.pos, len, encoding);\n    this.pos += alen;\n};\n\nXdrWriter.prototype.addText = function(s, encoding) {\n    var len = Buffer.byteLength(s, encoding);\n    var alen = align(len);\n    this.ensure(alen);\n    this.buffer.write(s, this.pos, len, encoding);\n    this.pos += alen;\n};\n\nXdrWriter.prototype.addBlr = function(blr) {\n    var alen = align(blr.pos);\n    this.ensure(alen + 4);\n    this.buffer.writeInt32BE(blr.pos, this.pos);\n    this.pos += 4;\n    blr.buffer.copy(this.buffer, this.pos);\n    this.pos += alen;\n};\n\nXdrWriter.prototype.getData = function() {\n    return this.buffer.slice(0, this.pos);\n};\n\nXdrWriter.prototype.addDouble = function(value) {\n    this.ensure(8);\n    this.buffer.writeDoubleBE(value, this.pos);\n    this.pos += 8;\n};\n\nXdrWriter.prototype.addQuad = function(quad) {\n    this.ensure(8);\n    var b = this.buffer;\n    b.writeInt32BE(quad.high, this.pos);\n    this.pos += 4;\n    b.writeInt32BE(quad.low, this.pos);\n    this.pos += 4;\n};\n\n/***************************************\n *\n *   XDR Reader\n *\n ***************************************/\n\nvar XdrReader = exports.XdrReader = function(buffer){\n    this.buffer = buffer;\n    this.pos = 0;\n};\n\nXdrReader.prototype.readInt = function () {\n    var r = this.buffer.readInt32BE(this.pos);\n    this.pos += 4;\n    return r;\n};\n\nXdrReader.prototype.readUInt = function () {\n    var r = this.buffer.readUInt32BE(this.pos);\n    this.pos += 4;\n    return r;\n};\n\nXdrReader.prototype.readInt64 = function () {\n    var high = this.buffer.readInt32BE(this.pos);\n    this.pos += 4;\n    var low = this.buffer.readInt32BE(this.pos);\n    this.pos += 4;\n    return new Long(low, high).toNumber();\n};\n\nXdrReader.prototype.readShort = function () {\n    var r = this.buffer.readInt16BE(this.pos);\n    this.pos += 2;\n    return r;\n};\n\nXdrReader.prototype.readQuad = function () {\n    var b = this.buffer;\n    var high = b.readInt32BE(this.pos);\n    this.pos += 4;\n    var low = b.readInt32BE(this.pos);\n    this.pos += 4;\n    return {low: low, high: high}\n};\n\nXdrReader.prototype.readFloat = function () {\n    var r = this.buffer.readFloatBE(this.pos);\n    this.pos += 4;\n    return r;\n};\n\nXdrReader.prototype.readDouble = function () {\n    var r = this.buffer.readDoubleBE(this.pos);\n    this.pos += 8;\n    return r;\n};\n\nXdrReader.prototype.readArray = function () {\n    var len = this.readInt();\n    if (!len)\n        return;\n    var r = this.buffer.slice(this.pos, this.pos + len);\n    this.pos += align(len);\n    return r;\n};\n\nXdrReader.prototype.readBuffer = function (len) {\n    if (!arguments.length)\n       len = this.readInt();\n\n    if (!len)\n        return;\n\n    var r = this.buffer.slice(this.pos, this.pos + len);\n    this.pos += align(len);\n    return r;\n};\n\nXdrReader.prototype.readString = function (encoding) {\n    var len = this.readInt();\n    return this.readText(len, encoding);\n};\n\nXdrReader.prototype.readText = function (len, encoding) {\n    if (len <= 0)\n        return '';\n\n    var r = this.buffer.toString(encoding, this.pos, this.pos + len);\n    this.pos += align(len);\n    return r;\n};\n","/home/travis/build/npmtest/node-npmtest-node-firebird/node_modules/node-firebird/lib/messages.js":"var fs = require('fs');\r\n\r\nconst\r\n    //ISC_MASK   = 0x14000000, // Defines the code as a valid ISC code\r\n    FAC_MASK   = 0x00FF0000, // Specifies the facility where the code is located\r\n    CODE_MASK  = 0x0000FFFF, // Specifies the code in the message file\r\n    CLASS_MASK = 0xF0000000; // Defines the code as warning, error, info, or other\r\n\r\nvar msgNumber = exports.msgNumber = function(facility, code) {\r\n    return (facility * 10000 + code);\r\n};\r\n\r\nvar getCode = exports.getCode = function(code) {\r\n    return (code & CODE_MASK)\r\n};\r\n\r\nvar getFacility = exports.getFacility =  function(code) {\r\n    return (code & FAC_MASK) >> 16;\r\n};\r\n\r\nexports.getClass = function(code) {\r\n    return (code & CLASS_MASK) >> 30\r\n};\r\n\r\nexports.lookupMessages = function(status, callback){\r\n\r\n    var handle;\r\n    var bucket_size;\r\n    var top_tree;\r\n    var levels;\r\n    var buffer;\r\n\r\n    function lookup(item, callback) {\r\n\r\n        var code = msgNumber(getFacility(item.gdscode), getCode(item.gdscode));\r\n\r\n        function readIndex(stackSize, position) {\r\n\r\n            function readNode(from) {\r\n                var ret = {};\r\n                ret.code = buffer.readUInt32LE(from);\r\n                ret.seek = buffer.readUInt32LE(from + 4);\r\n                return ret;\r\n            }\r\n\r\n            fs.read(handle, buffer, 0, bucket_size, position, function(err, bufferSize) {\r\n\r\n                if (bufferSize <= 0) {\r\n                    callback();\r\n                    return;\r\n                }\r\n\r\n                if (stackSize === levels) {\r\n                    search();\r\n                    return;\r\n                }\r\n\r\n                var from = 0;\r\n                var node = readNode(from);\r\n\r\n                while (true) {\r\n\r\n                    if (node.code >= code)\r\n                    {\r\n                        readIndex(stackSize + 1, node.seek);\r\n                        break;\r\n                    }\r\n\r\n                    from += 8;\r\n                    if (from >= bufferSize)\r\n                    {\r\n                        callback();\r\n                        break;\r\n                    }\r\n\r\n                    node = readNode(from);\r\n                }\r\n            });\r\n        }\r\n\r\n        function search() {\r\n\r\n            function readRec(from) {\r\n\r\n                function align(v) {\r\n                    return (v + 3) & ~3;\r\n                }\r\n\r\n                var ret = {};\r\n                ret.code = buffer.readUInt32LE(from);\r\n                ret.length = buffer.readUInt16LE(from + 4);\r\n\r\n                if (ret.code == code){\r\n                    from += 8;\r\n                    ret.text = buffer.toString(null, from, from + ret.length);\r\n                } else\r\n                    ret.seek = from + align(8 + ret.length, 4);\r\n\r\n                return ret;\r\n            }\r\n\r\n            var rec = readRec(0);\r\n\r\n            while (rec.seek) {\r\n                if (rec.seek >= buffer.length)\r\n                    break;\r\n                else\r\n                    rec = readRec(rec.seek);\r\n            }\r\n\r\n            var str = rec.text;\r\n            if (item.params) {\r\n                for (var i = 0; i < item.params.length; i++)\r\n                    str = str.replace('@' + String(i+1), item.params[i]);\r\n            }\r\n\r\n            callback(str);\r\n        }\r\n\r\n        readIndex(1, top_tree);\r\n    }\r\n\r\n    fs.open(__dirname + \"/firebird.msg\", 'r', function(err, h) {\r\n\r\n        if (!h) {\r\n            callback();\r\n            return;\r\n        }\r\n\r\n        buffer = new Buffer(14);\r\n        fs.read(h, buffer, 0, 14, 0, function(){\r\n\r\n            handle = h;\r\n            bucket_size = buffer.readUInt16LE(2);\r\n            top_tree = buffer.readUInt32LE(4);\r\n            levels = buffer.readUInt16LE(12);\r\n            buffer = new Buffer(bucket_size);\r\n\r\n            var i = 0;\r\n            var text;\r\n\r\n            function loop() {\r\n                lookup(status[i], function(line) {\r\n                    if (text)\r\n                        text = text + ', ' + line\r\n                    else\r\n                        text = line;\r\n\r\n                    if (i === status.length - 1) {\r\n                        fs.closeSync(handle);\r\n                        callback(text);\r\n                    } else {\r\n                        i++;\r\n                        loop();\r\n                    }\r\n                });\r\n            }\r\n\r\n            loop(0);\r\n        });\r\n    });\r\n};\r\n"}